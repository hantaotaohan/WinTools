{"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace"],"tree":[0,[1,[262],[263],[264],[265]],[2,[3,[4,[257,[258,[259,[260],[261]]]]],[5,[256]],[6,[137],[138],[139],[140,[208,[254],[255]],[209,[252],[253]],[210,[249],[250],[251]],[211,[248]],[212,[244,[245,[246],[247]]]],[213,[241],[242],[243]],[214,[237,[240]],[238,[239]]],[215,[236]],[216,[235]],[217,[231,[232,[233],[234]]]],[218],[219,[227,[230]],[228,[229]]],[220],[221],[222,[226]],[223,[224],[225]]],[141,[147],[148,[207]],[149,[204,[206]],[205]],[150,[201,[203]],[202]],[151],[152,[192,[193,[200]],[194,[199]],[195,[198]],[196,[197]]]],[153,[190,[191]]],[154,[184],[185,[188],[189]],[186],[187]],[155,[159],[160,[183]],[161],[162,[180,[182]],[181]],[163],[164,[177,[179]],[178]],[165],[166],[167,[169,[170,[174,[175],[176]]],[171,[172,[173]]]]],[168]],[156,[157],[158]]],[142,[143],[144,[145],[146]]]],[7,[120],[121],[122,[136]],[123,[133,[135]],[134]],[124,[131],[132]],[125,[128,[130]],[129]],[126,[127]]],[8,[113],[114],[115,[117,[119]],[118]],[116]],[9,[69],[70],[71,[111],[112]],[72,[108,[109,[110]]]],[73],[74,[104,[105,[106],[107]]]],[75,[103]],[76,[99],[100],[101],[102]],[77,[96,[97,[98]]]],[78,[88],[89],[90],[91],[92],[93],[94],[95]],[79,[83,[87]],[84,[85],[86]]],[80,[81],[82]]],[10,[40],[41,[67],[68]],[42,[63,[64,[65],[66]]]],[43],[44,[62]],[45,[59,[60,[61]]]],[46],[47,[55,[58]],[56,[57]]],[48,[53],[54]],[49,[50,[52]],[51]]],[11,[15],[16,[38],[39]],[17,[35,[37]],[36]],[18,[33],[34]],[19,[29,[30,[31],[32]]]],[20,[27],[28]],[21,[24,[25,[26]]]],[22,[23]]],[12,[13],[14]]]]],"tag_map":[{"a":[["lang","en",1],["lang","en"]],"n":"html"},{"x":"\n\n","n":"head","l":"\n"},{"x":"\n","n":"body","l":"\n"},{"a":[["class","chapter"],["title","其它环境中的 Git"],["role","doc-chapter"],["id","_其它环境中的_git"]],"x":"\n","n":"section","l":"\n"},{"x":"\n","n":"header","l":"\n"},{"a":[["class","abstract"]],"x":"\n","n":"div","l":"\n"},{"a":[["class","sect1"],["title","图形界面"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","Visual Studio 中的 Git"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","Eclipse 中的 Git"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","Bash 中的 Git"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","Zsh 中的 Git"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","Powershell 中的 Git"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","总结"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_总结"]],"x":"总结","n":"h2","l":"\n"},{"x":"你已经学会了如何从日常工具中发挥 Git 的强大力量，以及从自己的程序中访问 Git 仓库的方法。","n":"p","l":"\n"},{"a":[["id","r_git_powershell"]],"x":"Powershell 中的 Git","n":"h2","l":"\n"},{"x":"\n\nWindows 中的普通命令行终端 (","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果你已经在 Windows 上安装了 GitHub，Posh-Git 也会被安装，你只需要添加以下两行到你的 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果你没有在 Windows 上安装 GitHub，只需要从 (","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"它将会向你的 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"profile.ps1","n":"code","l":" 文件添加适当的内容，Posh-Git 将会在下次打开提示符时被启用。"},{"a":[["class","source language-powershell"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span","l":"> Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm\n> cd ~\\Documents\\WindowsPowerShell\\posh-git\n> .\\install.ps1"},{"a":[["href","https://github.com/dahlbyk/posh-git"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"https://github.com/dahlbyk/posh-git","n":"a","l":") 下载一份 Posh-Git 发行版，并且解压至 "},{"a":[["class","literal"]],"x":"WindowsPowershell","n":"code","l":" 目录。\n然后以管理员权限打开 Powershell 提示符，并且执行下面的命令："},{"a":[["class","source language-powershell"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span","l":". (Resolve-Path "},{"a":[["style","font-style: italic"]],"x":"\"$env:LOCALAPPDATA\\GitHub\\shell.ps1\"","n":"span","l":")\n. $env:github_posh_git\\profile.example.ps1"},{"a":[["class","literal"]],"x":"profile.ps1","n":"code","l":" 文件 (文件位于 "},{"a":[["class","literal"]],"x":"C:\\Users\\<username>\\Documents\\WindowsPowerShell","n":"code","l":"):"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 13. 附带了 Posh-Git 扩展包的 Powershell。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3Bvc2gtZ2l0LnBuZw==|"],["alt","附带了 Posh-Git 扩展包的 Powershell。"],["data-calibre-src","OEBPS/images/posh-git.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"cmd.exe","n":"code","l":") 无法自定义 Git 使用体验，但是如果你正在使用 Powershell，那么你就十分幸运了。\n一个名为 Posh-Git ("},{"a":[["href","https://github.com/dahlbyk/posh-git"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"https://github.com/dahlbyk/posh-git","n":"a","l":") 的扩展包提供了强大的 tab 补全功能， 并针对提示符进行了增强，以帮助你聚焦于你的仓库状态。\n它看起来像："},{"a":[["id","_zsh_中的_git"]],"x":"Zsh 中的 Git","n":"h2","l":"\n"},{"x":"\nGit 还为 Zsh 提供了一个 Tab 补全库。\n复制 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"意义不明的 Tab 补全并不仅仅会被列出；它们还会有帮助性的描述，你可以通过不断敲击 Tab 以图形方式浏览补全列表。\n该功能可用于 Git 命令、它们的参数和在仓库中内容的名称（例如 refs 和 remotes），还有文件名和其他所有 Zsh 知道如何去补全的项目。","n":"p","l":"\n"},{"x":"在提示符自定义方面，Zsh 很好地兼容了Bash，并允许你同时使用一个右侧提示符。\n把如下代码添加至你的 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"当你的命令行位于一个 Git 仓库目录时，在任何时候，都可以在命令行窗口右侧显示当前分支。\n它看起来像这样：","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"Zsh 本身已足够强大，但还有一些专门为它打造的完整框架，使它更加完善。\n其中之一名为 \"oh-my-zsh\"，你可以在 ","n":"p","l":"\n"},{"a":[["id","roh_my_zsh_git"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 12. 一个 oh-my-zsh 主题的示例.","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3pzaC1vaC1teS5wbmc=|"],["alt","一个 oh-my-zsh 主题的示例."],["data-calibre-src","OEBPS/images/zsh-oh-my.png"]],"n":"img","l":"\n"},{"a":[["href","https://github.com/robbyrussell/oh-my-zsh"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"https://github.com/robbyrussell/oh-my-zsh","n":"a","l":" 找到它。\noh-my-zsh 的扩展系统包含强大的 Git Tab 补全功能，且许多提示符 \"主题\" 可以展示版本控制数据。\n"},{"a":[["id","xref-roh_my_zsh_git"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/_其它环境中的_git.xhtml\", \"frag\": \"roh_my_zsh_git\"}"]],"x":"一个 oh-my-zsh 主题的示例.","n":"a","l":" 只是可以其中一个可以通过该系统实现的例子。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 11. 自定义 ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"zsh","n":"code","l":" 提示符."},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3pzaC1wcm9tcHQucG5n|"],["alt","自定义 `zsh` 提示符."],["data-calibre-src","OEBPS/images/zsh-prompt.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span","l":"setopt prompt_subst\n. ~/git-prompt.sh\nexport RPROMPT=$'$(__git_ps1 \"%s\")'"},{"a":[["class","literal"]],"x":"~/.zshrc","n":"code","l":" 文件中，就可以在右侧显示分支名称："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git che<Tab>\ncheck-attr        -- 显示 gitattributes 信息\ncheck-ref-format  -- 检查引用名称是否符合规范\ncheckout          -- 从工作区中检出分支或路径\ncheckout-index    -- 从暂存区拷贝文件至工作目录\ncherry            -- 查找没有被合并至上游的提交\ncherry-pick       -- 从一些已存在的提交中应用更改"},{"a":[["class","literal"]],"x":"contrib/completion/git-completion.zsh","n":"code","l":" 到你的 home 目录，然后在 "},{"a":[["class","literal"]],"x":".zshrc","n":"code","l":" 中 source 即可。\n相对于 Bash，Zsh 的接口更加强大："},{"a":[["id","_bash_中的_git"]],"x":"Bash 中的 Git","n":"h2","l":"\n"},{"x":"\n如果你是一名 Bash 用户，你可以从中发掘出一些 Shell 的特性，让你在使用 Git 时更加随心所欲。\n实际上 Git 附带了几个 Shell 的插件，但是这些插件并不是默认打开的。","n":"p","l":"\n"},{"x":"首先，你需要从 Git 源代码中获得一份 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"做完这些之后，请将你当前的目录切换到某一个 Git 仓库，并且输入：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"……此时 Bash 将会把上面的命令自动补全为 ","n":"p","l":"\n"},{"x":"这项功能也可以用于你自己定义的提示符（","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"这两个脚本都提供了很有帮助的文档；浏览 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git-completion.bash","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"git-prompt.sh","n":"code","l":" 的内容以获得更多信息。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 10. 自定义的 ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"bash","n":"code","l":" 提示符（"},{"a":[["class","literal"]],"x":"prompt","n":"code","l":"）."},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2dpdC1iYXNoLnBuZw==|"],["alt","自定义的 `bash` 提示符（`prompt`）."],["data-calibre-src","OEBPS/images/git-bash.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"\\w","n":"code","l":" 表示打印当前工作目录，"},{"a":[["class","literal"]],"x":"\\$","n":"code","l":" 打印 "},{"a":[["class","literal"]],"x":"$","n":"code","l":" 部分的提示符（"},{"a":[["class","literal"]],"x":"prompt","n":"code","l":"），"},{"a":[["class","literal"]],"x":"__git_ps1 \" (%s)\"","n":"code","l":" 表示通过格式化参数符（"},{"a":[["class","literal"]],"x":"%s","n":"code","l":"）调用`git-prompt.sh`脚本中提供的函数。\n因为有了这个自定义提示符，现在你的 "},{"a":[["class","literal"]],"x":"Bash","n":"code","l":" 提示符（"},{"a":[["class","literal"]],"x":"prompt","n":"code","l":"）在 Git 仓库的任何子目录中都将显示成这样："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span","l":". ~/git-prompt.sh\nexport GIT_PS1_SHOWDIRTYSTATE=1\nexport PS1='\\w$(__git_ps1 \" (%s)\")\\$ '"},{"a":[["class","literal"]],"x":"prompt","n":"code","l":"），显示当前目录下 Git 仓库的信息。\n根据你的需要，这个信息可以简单或复杂，这里通常有大多数人想要的几个关键信息，比如当前分支信息和当前工作目录的状态信息。\n要添加你自己的提示符（"},{"a":[["class","literal"]],"x":"prompt","n":"code","l":"），只需从 Git 源版本库复制 "},{"a":[["class","literal"]],"x":"contrib/completion/git-prompt.sh","n":"code","l":" 文件到你的 Home 目录(或其他便于你访问与管理的目录)， 并在 "},{"a":[["class","literal"]],"x":".bashrc","n":"code","l":" 里添加这个文件路径，类似于下面这样："},{"a":[["class","literal"]],"x":"git checkout","n":"code","l":"。\n在适当的情况下，这项功能适用于 Git 所有的子命令、命令行参数、以及远程仓库与引用名。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git chec<tab>"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span","l":". ~/git-completion.bash"},{"a":[["class","literal"]],"x":"contrib/completion/git-completion.bash","n":"code","l":" 文件的拷贝。\n将这个文件复制到一个相对便捷的目录，例如你的 Home 目录，并且将它的路径添加到 "},{"a":[["class","literal"]],"x":".bashrc","n":"code","l":" 中："},{"a":[["id","_eclipse_中的_git"]],"x":"Eclipse 中的 Git","n":"h2","l":"\n"},{"x":"\nEclipse 附带了一个名为 Egit 的插件，它提供了一个非常完善的 Git 操作接口。\n这个插件可以通过切换到 Git 视图来使用：(Window > Open Perspective > Other…， 然后选择 “Git”）。","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"EGit 提供了许多强大的帮助文档，你能通过下面的操作来访问它：单击菜单 Help > Help Contents，然后从内容列表中选择 “EGit Documentation” 节点。","n":"p","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 9. Eclipse 中 EGit 的界面环境。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2VnaXQucG5n|"],["alt","Eclipse 中 EGit 的界面环境。"],["data-calibre-src","OEBPS/images/egit.png"]],"n":"img","l":"\n"},{"a":[["id","_visual_studio_中的_git"]],"x":"Visual Studio 中的 Git","n":"h2","l":"\n"},{"x":"\n从 Visual Studio 2013 Update 1 版本开始，Visual Studio 用户可以在他们的 IDE 中直接使用内嵌的 Git 客户端。\nVisual Studio 集成源代码版本控制特性已经有很长一段时间，但面向的是集中式、文件锁定方式的系统，Git 并不能很好地符合这种工作流程。\nVisual Studio 2013 中已经支持 Git，并独立于原有版本管理系统，这使得 Visual Studio 和 Git 能更好地相互适应。","n":"p","l":"\n"},{"x":"想要找到这个特性，在 Visual Studio 中打开一个已经用 Git 管理的项目（或者直接在项目目录中 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"Visual Studio 能够记住所有你打开过的用 Git 管理的项目，它们都在下方的列表中。\n如果没看到你想要的项目，点击 \"Add\" 按钮，添加项目工作目录的路径。\n双击其中一个本地的 Git 仓库会将你带入 \"Home\" 视图，大概如 ","n":"p","l":"\n"},{"a":[["id","rvs_home"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"Visual Studio 现在拥有一套着眼于任务的强大 Git 操作界面。\n它包括线性的历史视图、diff 视图、远程仓库操作命令，以及其它很多功能。\n这个特性的完整文档（放在这里并不合适）请参阅 ","n":"p","l":"\n"},{"a":[["href","http://msdn.microsoft.com/en-us/library/hh850437.aspx"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"http://msdn.microsoft.com/en-us/library/hh850437.aspx","n":"a","l":" 。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 8. Visual Studio 中的 Git 仓库的 “Home” 视图。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3ZzLTIucG5n|"],["alt","Visual Studio 中的 Git 仓库的 “Home” 视图。"],["data-calibre-src","OEBPS/images/vs-2.png"]],"n":"img","l":"\n"},{"a":[["id","xref-rvs_home"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/_其它环境中的_git.xhtml\", \"frag\": \"rvs_home\"}"]],"x":"Visual Studio 中的 Git 仓库的 “Home” 视图。","n":"a","l":" 所示。\n这是一个执行 Git 操作的操作中心；当你 "},{"x":"正在编写","n":"em","l":" 代码的时候，你可能主要关注 \"Changes\" 视图，当需要拉取同伴的改动时，你将使用 \"Unsynced Commits\" 和 \"Branches\" 视图。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 7. 从 Team Explorer 中连接 Git 仓库。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3ZzLTEucG5n|"],["alt","从 Team Explorer 中连接 Git 仓库。"],["data-calibre-src","OEBPS/images/vs-1.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git init","n":"code","l":" ），选择菜单 View > Team Explorer。\n你将看到 \"Connect\" 视图，大概如下图所示："},{"a":[["id","_图形界面"]],"x":"图形界面","n":"h2","l":"\n"},{"x":"\nGit 的原生环境是终端。\n在那里，你可以体验到最新的功能，也只有在那里，你才能尽情发挥 Git 的全部能力。\n但是对于某些任务而言，纯文本并不是最佳的选择；有时候你确实需要一个可视化的展示方式，而且有些用户更习惯那种能点击的界面。","n":"p","l":"\n"},{"x":"有一点请注意，不同的界面是为不同的工作流程设计的。\n一些客户端的作者为了支持某种他认为高效的工作流程，经过精心挑选，只显示了 Git 功能的一个子集。\n每种工具都有其特定的目的和意义，从这个角度来看，不能说某种工具比其它的`‘更好’'。\n还有请注意，没有什么事情是图形界面客户端可以做而命令行客户端不能做的；命令行始终是你可以完全操控仓库并发挥出全部力量的地方。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","gitk 和 git-gui"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","Mac 和 Windows 上的 GitHub 客户端"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","其它图形界面"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_其它图形界面"]],"x":"其它图形界面","n":"h3","l":"\n"},{"x":"除此之外，还有许许多多其它的图形化 Git 客户端，其中既有单一功能的定制工具，也有试图提供 Git 所有功能的复杂应用。\nGit 的官方网站整理了一份时下最流行的客户端的清单 ","n":"p","l":"\n"},{"a":[["href","http://git-scm.com/downloads/guis"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"http://git-scm.com/downloads/guis","n":"a","l":"。\n在 Git 的维基站点还可以看到一份更全的清单 "},{"a":[["href","https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces","n":"a","l":"."},{"a":[["id","_mac_和_windows_上的_github_客户端"]],"x":"Mac 和 Windows 上的 GitHub 客户端","n":"h3","l":"\n"},{"x":"\nGitHub 发布了两个面向工作流程的 Git 客户端：Windows 版，和 Mac 版。\n它们很好的展示了一个面向工作流程的工具应该是什么样子——专注于提升那些常用的功能及其协作的可用性，而不是实现 Git 的 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"我们在设计的时候就努力将二者的外观和操作体验都保持一致，因此本章会把他们当做同一个产品来介绍。\n我们并不会详细地介绍该工具的每一个功能（因为它们本身也有文档），但请快速了解一下 “变更” 窗口（你大部分时间都会花在使用该窗口上）的以下几点：","n":"p","l":"\n"},{"a":[["class","itemized-list"]],"x":"\n","n":"div","l":"\n"},{"a":[["class","admonition note"],["title","Note"]],"x":"\n","n":"aside","l":"\n"},{"a":[["class","sect3"],["title","安装"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect3"],["title","推荐的工作流程"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect3"],["title","小结"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_小结"]],"x":"小结","n":"h4","l":"\n"},{"x":"这些工具是为其各自针对的工作流程所量身定做的。\n开发者和非开发者可以轻松地在分分钟内就搭建起项目协作环境，它们还内置了其它辅助最佳实践的功能。\n但是，如果你的工作流程有所不同，或者你需要在进行网络操作时有更多的控制，那么建议你考虑一下其它客户端或者使用命令行。","n":"p","l":"\n"},{"a":[["id","_推荐的工作流程"]],"x":"推荐的工作流程","n":"h4","l":"\n"},{"x":"安装并配置好以后，你就可以使用 GitHub 客户端来执行一些常见的 Git 任务。\n该工具所推荐的工作流程有时也被叫做 “GitHub 流”。\n我们在 ","n":"p","l":"\n"},{"x":"两个平台上的客户端在分支管理上有所不同。\n在 Mac 上，创建分支的按钮在窗口的上方：","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"在 Windows 上，你可以通过在分支切换挂件中输入新分支的名称来完成创建：","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"分支创建好以后，新建提交就变得非常简单直接了。\n现在工作目录中做一些修改，然后切换到 GitHub 客户端窗口，你所做的修改就会显示在那里。\n输入提交日志，选中那些需要被包含在本次提交中的文件，然后点击 “提交” 按钮（也可以在键盘上按 ctrl-enter 或 ⌘-enter）。","n":"p","l":"\n"},{"x":"“同步” 功能是你在网络上和其它仓库交互的主要途径。\npush，fetch，merge，和 rebase 在 Git 内部是一连串独立的操作, 而 GitHub 客户端将这些操作都合并成了单独一个功能。\n你点击同步按钮时实际上会发生如下这些操作：","n":"p","l":"\n"},{"a":[["class","ordered-list arabic"]],"x":"\n","n":"div","l":"\n"},{"x":"如果你遵循推荐的工作流程，以上就是最常用的一系列命令，因此将它们合并为一个让事情简单了很多。","n":"p","l":"\n"},{"a":[["class","arabic"]],"x":"\n","n":"ol","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"a":[["class","principal"]],"n":"span","l":"\n"},{"a":[["class","literal"]],"x":"git push","n":"code","l":"。"},{"a":[["class","principal"]],"n":"span","l":"\n"},{"a":[["class","literal"]],"x":"git pull --rebase","n":"code","l":"。\n如果上述命令由于存在合并冲突而失败，则会退而执行 "},{"a":[["class","literal"]],"x":"git pull --no-rebase","n":"code","l":"。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 6. 在 Windows 上创建分支。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2JyYW5jaF93aWRnZXRfd2luLnBuZw==|"],["alt","在 Windows 上创建分支。"],["data-calibre-src","OEBPS/images/branch_widget_win.png"]],"n":"img","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 5. Mac 上的`‘创建分支’'按钮。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2JyYW5jaF93aWRnZXRfbWFjLnBuZw==|"],["alt","Mac 上的``创建分支''按钮。"],["data-calibre-src","OEBPS/images/branch_widget_mac.png"]],"n":"img","l":"\n"},{"a":[["id","xref--ch06-github--r_github_flow"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"r_github_flow\"}"]],"x":"GitHub 流程","n":"a","l":" 一节中对此有详细的介绍，其要点是 (a) 你会提交到一个分支；(b) 你需要经常与远程仓库保持同步。"},{"a":[["id","_安装"]],"x":"安装","n":"h4","l":"\n"},{"x":"GitHub 的 Windows 客户端可以从 ","n":"p","l":"\n"},{"x":"它们都是`‘绿色软件’'——如果软件打开发现有更新，下载和安装升级包都是在后台完成的。\n为方便起见它们还打包了一份 Git，也就是说你一旦安装好就再也无需劳心升级的事情了。\nWindows 的客户端还提供了快捷方式，可以启动装了 Posh-git 插件的 Powershell，在本章的后面一节我们会详细介绍这方面的内容。","n":"p","l":"\n"},{"x":"接下来我们给它设置一些工作仓库。\n客户端会显示你在 GitHub 上有权限操作的仓库的列表，你可以选择一个然后一键克隆。\n如果你本地已经建立了仓库，只需要用鼠标把它从 Finder 或 Windows 资源管理器拖进 GitHub 客户端窗口，就可以把该仓库添加到左侧的仓库列表里面去了。","n":"p","l":"\n"},{"a":[["href","https://windows.github.com"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"https://windows.github.com","n":"a","l":" 下载，Mac 客户端可以从 "},{"a":[["href","https://mac.github.com"],["class","link"],["target","_blank"],["rel","noopener noreferrer"]],"x":"https://mac.github.com","n":"a","l":"下载。\n第一次打开软件时，它会引导你进行一系列的首次使用设置，例如设置你的姓名和电子邮件，它还会智能地帮你调整一些常用的默认设置，例如凭证缓存和 CRLF 的处理方式。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"你不需要注册 GitHub 账号也可以使用这些工具。\n尽管它们是按照 GitHub 推荐的工作流程来设计的，并突出提升了一些 GitHub 的服务体验，但它们可以在任何 Git 仓库上工作良好，也可以通过网络连接到任意 Git 主机。","n":"p","l":"\n"},{"x":"\n","n":"ul","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"a":[["class","principal"]],"x":"最后需要熟悉的是右上角的 “Sync” 按钮，你主要通过这个按钮来进行网络上的交互。","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"右侧是修改查看区，它会告诉你工作目录里哪些东西被修改了（译注：修改模式），或选中的提交里包括了哪些修改（译注：历史模式）。","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"中间是输入-提交区，你可以在这里输入提交日志，以及选择哪些文件需要被提交。\n（在 Windows 上，提交历史就显示在这个区域的下方；在 Mac 上，提交历史有一个单独的窗口）","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"左侧是正在追踪的仓库的列表；通过点击左上方的 “+” 图标，你可以添加一个需要追踪的仓库（既可以是通过 clone，也可以从本地添加）。","n":"span","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 4. GitHub Windows 客户端。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2dpdGh1Yl93aW4ucG5n|"],["alt","GitHub Windows 客户端。"],["data-calibre-src","OEBPS/images/github_win.png"]],"n":"img","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 3. GitHub Mac 客户端。","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2dpdGh1Yl9tYWMucG5n|"],["alt","GitHub Mac 客户端。"],["data-calibre-src","OEBPS/images/github_mac.png"]],"n":"img","l":"\n"},{"x":"所有","n":"em","l":" 功能.\n它们看起来长这个样子："},{"a":[["id","_code_class_literal_gitk_code_和_code_class_literal_git_gui_code"]],"n":"h3","l":"\n"},{"x":"\n在安装 Git 的同时，你也装好了它提供的可视化工具，","n":"p","l":"\n"},{"n":"p","l":"\n"},{"x":"使用 Gitk 的最简单方法就是从命令行打开。\n只需 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"Gitk 可以接受很多命令行选项，其中的大部分都直接传给底层的 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"这张图看起来就和执行 ","n":"p","l":"\n"},{"x":"与之相比，","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"它的界面长这个样子：","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"左侧是索引区；未暂存的修改显示在上方，已暂存的修改显示在下方。\n你可以通过点击文件名左侧的图标来将该文件在暂存状态与未暂存状态之间切换，你也可以通过选中一个文件名来查看它的详情。","n":"p","l":"\n"},{"x":"右侧窗口的上方以 diff 格式来显示当前选中文件发生了变动的地方。\n你可以通过右击某一区块或行从而将这一区块或行放入暂存区。","n":"p","l":"\n"},{"x":"右侧窗口的下方是写日志和执行操作的地方。\n在文本框中键入日志然后点击 “提交” 就和执行 ","n":"p","l":"\n"},{"n":"p","l":"\n"},{"a":[["class","literal"]],"x":"gitk","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"git-gui","n":"code","l":" 就是针对某种任务设计的工具的两个例子。\n它们分别为了不同的目的（即查看历史和制作提交）而进行了精简，略去了用不到的功能。"},{"a":[["class","literal"]],"x":"git commit","n":"code","l":" 的效果差不多。\n如果你想要修订上一次提交, 可以选中`‘修订’' 按钮，上次一提交的内容就会显示在 “暂存区”。\n然后你就可以简单的对修改进行暂存和取消暂存操作，更新提交日志，然后再次点击 “提交” 用这个新的提交来覆盖上一次提交。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 2. ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"git-gui","n":"code","l":" 提交工具。"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2dpdC1ndWkucG5n|"],["alt","`git-gui` 提交工具。"],["data-calibre-src","OEBPS/images/git-gui.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git gui"},{"a":[["class","literal"]],"x":"git-gui","n":"code","l":" 则主要是一个用来制作提交的工具。\n打开它的最简单方法也是从命令行启动："},{"a":[["class","literal"]],"x":"git log --graph","n":"code","l":" 命令的输出差不多；每个点代表一次提交，线代表父子关系，而彩色的方块则用来标示一个个引用。\n黄点表示 HEAD，红点表示尚未提交的本地变动。\n下方的窗口用来显示当前选中的提交的具体信息；评论和补丁显示在左侧，摘要显示在右侧。\n中间则是一组用来搜索历史的控件。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 1. ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"gitk","n":"code","l":" 历史查看器。"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2dpdGsucG5n|"],["alt","`gitk` 历史查看器。"],["data-calibre-src","OEBPS/images/gitk.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 去执行了。\n"},{"a":[["class","literal"]],"x":"--all","n":"code","l":" 可能是这其中最有用的一个, 它告诉 gitk 去尽可能地从 "},{"x":"任何","n":"em","l":" 引用查找提交并显示，而不仅仅是从 HEAD。\nGitk 的界面看起来长这样："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" gitk [git log options]"},{"a":[["class","literal"]],"x":"cd","n":"code","l":" 到一个 Git 仓库，然后键入："},{"a":[["class","literal"]],"x":"gitk","n":"code","l":" 是一个历史记录的图形化查看器。\n你可以把它当作是基于 "},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"git grep","n":"code","l":" 命令的一个强大的图形操作界面。\n当你需要查找过去发生的某次记录，或是可视化查看项目历史的时候，你将会用到这个工具。"},{"a":[["class","literal"]],"x":"gitk","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"git-gui","n":"code","l":"。"},{"a":[["class","literal"]],"x":"gitk","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"git-gui","n":"code"},{"x":"从头至尾读到了这里，你肯定已经掌握了不少使用 Git 命令行操作的知识。\n你学会了操作本地文件，通过网络连接你的仓库，以及与他人进行有效率的合作。\n但是故事并未就此结束；Git 通常只是更大的生态圈的一部分，在某些情况下使用终端并不是最合适的方式。\n现在就让我们来了解一下如何在其它类型的环境中更好地使用 Git，以及别的应用（包括你的）如何与 Git 进行协作。","n":"p","l":"\n"},{"a":[["class","chapter-header"]],"x":"\n","n":"div","l":"\n"},{"a":[["class","chapter-title"]],"n":"h1","l":"\n"},{"a":[["class","subtitle"]],"n":"small"},{"x":"其它环境中的","n":"b","l":" "},{"x":"Git","n":"b"},{"x":"其它环境中的 Git","n":"title","l":"\n"},{"a":[["rel","stylesheet"],["type","text/css"],["href","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvc3R5bGVzL2VwdWIzLmNzcw==|"]],"n":"link","l":"\n"},{"a":[["rel","stylesheet"],["type","text/css"],["href","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvc3R5bGVzL2VwdWIzLWNzczMtb25seS5jc3M=|"],["media","(min-device-width: 0px)"]],"n":"link","l":"\n"},{"a":[["type","text/javascript"]],"x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","n":"script","l":"\n"}]}