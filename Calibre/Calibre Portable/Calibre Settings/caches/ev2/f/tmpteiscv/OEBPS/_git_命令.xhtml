{"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace"],"tree":[0,[1,[619],[620],[621],[622]],[2,[3,[4,[614,[615,[616,[617],[618]]]]],[5],[6],[7,[581],[582,[612],[613]],[583,[594],[595],[596,[611]],[597,[610]],[598,[609]],[599,[606],[607],[608]],[600,[605]],[601,[604]],[602,[603]]],[584,[585],[586,[592],[593]],[587,[588],[589],[590],[591]]]],[8,[545],[546],[547,[570],[571,[580]],[572,[579]],[573,[578]],[574,[577]],[575,[576]]],[548,[549],[550,[564],[565],[566],[567],[568],[569]],[551,[563]],[552,[562]],[553,[560],[561]],[554,[559]],[555,[557],[558]],[556]]],[9,[420],[421],[422,[530],[531,[542],[543],[544]],[532],[533,[540],[541]],[534,[539]],[535,[538]],[536,[537]]],[423,[523],[524,[529]],[525,[526],[527],[528]]],[424,[499],[500,[519],[520],[521],[522]],[501,[517],[518]],[502,[515],[516]],[503,[513],[514]],[504,[508],[509],[510],[511],[512]],[505,[506],[507]]],[425,[493],[494,[497],[498]],[495,[496]]],[426,[472],[473,[491],[492]],[474,[487],[488],[489],[490]],[475,[485],[486]],[476,[483],[484]],[477,[481],[482]],[478,[479],[480]]],[427,[455],[456,[468],[469],[470],[471]],[457,[465],[466],[467]],[458,[464]],[459,[460],[461],[462],[463]]],[428,[442],[443,[453],[454]],[444,[450],[451],[452]],[445,[446],[447],[448],[449]]],[429,[437],[438,[441]],[439,[440]]],[430,[431],[432,[436]],[433,[434],[435]]]],[10,[304],[305],[306,[407],[408,[419]],[409,[415],[416],[417],[418]],[410,[413],[414]],[411,[412]]],[307,[390],[391,[406]],[392,[404],[405]],[393,[402],[403]],[394,[400],[401]],[395,[398],[399]],[396,[397]]],[308,[371],[372,[389]],[373,[385],[386],[387],[388]],[374,[383],[384]],[375,[380],[381],[382]],[376,[379]],[377,[378]]],[309,[365],[366,[370]],[367,[368],[369]]],[310,[328],[329,[364]],[330],[331,[360],[361],[362],[363]],[332,[357],[358],[359]],[333,[352],[353],[354],[355],[356]],[334,[346],[347],[348],[349],[350],[351]],[335,[343],[344],[345]],[336,[341],[342]],[337,[338],[339],[340]]],[311,[323],[324,[327]],[325,[326]]],[312,[313],[314,[322]],[315,[320],[321]],[316,[317],[318],[319]]]],[11,[217],[218],[219,[289],[290,[303]],[291,[301],[302]],[292,[300]],[293,[298],[299]],[294,[295],[296],[297]]],[220,[274],[275,[286],[287],[288]],[276,[284],[285]],[277,[283]],[278,[282]],[279,[280],[281]]],[221,[249],[250,[273]],[251,[266],[267],[268],[269],[270],[271],[272]],[252,[264],[265]],[253,[262],[263]],[254,[260],[261]],[255,[258],[259]],[256,[257]]],[222,[240],[241,[246],[247],[248]],[242,[245]],[243,[244]]],[223,[234],[235,[239]],[236,[237],[238]]],[224,[225],[226,[229],[230],[231],[232],[233]],[227,[228]]]],[12,[189],[190,[207],[208,[216]],[209,[215]],[210,[214]],[211,[212],[213]]],[191,[200],[201,[204],[205],[206]],[202,[203]]],[192,[193],[194,[199]],[195,[196],[197],[198]]]],[13,[169],[170],[171,[184],[185,[188]],[186,[187]]],[172,[179],[180,[183]],[181,[182]]],[173,[174],[175,[178]],[176,[177]]]],[14,[137],[138],[139,[163],[164,[168]],[165,[166],[167]]],[140,[148],[149,[160],[161],[162]],[150,[159]],[151,[157],[158]],[152,[156]],[153,[154],[155]]],[141,[142],[143,[146],[147]],[144,[145]]]],[15,[84],[85],[86,[131],[132,[135],[136]],[133,[134]]],[87,[117],[118,[130]],[119,[125,[129]],[126],[127],[128]],[120,[123],[124]],[121,[122]]],[88,[111],[112,[116]],[113,[114],[115]]],[89,[105],[106,[107],[108],[109],[110]]],[90,[98],[99,[103],[104]],[100,[101],[102]]],[91,[92],[93,[97]],[94,[95],[96]]]],[16,[70],[71],[72,[79],[80,[83]],[81,[82]]],[73,[74],[75,[78]],[76,[77]]]],[17,[34],[35],[36,[65],[66,[69]],[67,[68]]],[37,[60],[61,[64]],[62,[63]]],[38,[51],[52,[59]],[53,[56],[57],[58]],[54,[55]]],[39,[40],[41,[50]],[42,[46],[47],[48],[49]],[43,[44],[45]]]],[18,[19],[20],[21,[32],[33]],[22,[28],[29],[30],[31]],[23,[26],[27]],[24,[25]]]]]],"tag_map":[{"a":[["lang","en",1],["lang","en"]],"n":"html"},{"x":"\n\n","n":"head","l":"\n"},{"x":"\n","n":"body","l":"\n"},{"a":[["class","chapter"],["title","Git 命令"],["role","doc-chapter"],["id","_git_命令"]],"x":"\n","n":"section","l":"\n"},{"x":"\n","n":"header","l":"\n"},{"x":"在这一整本书里我们介绍了大量的 Git 命令，并尽可能的通过讲故事的的方式来介绍它们，慢慢的介绍了越来越多的命令。\n但是这导致这些命令的示例用法都散落在在全书的各处。","n":"p","l":"\n"},{"x":"在此附录中，我们会将本书中所提到过的命令都过一遍，并根据其用途大致的分类。\n我们会大致地讨论每个命的作用，指出其在本书中哪些章节使用过。","n":"p","l":"\n"},{"a":[["class","sect1"],["title","设置与配置"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","获取与创建项目"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","快照基础"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","分支与合并"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","项目分享与更新"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","检查与比较"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","调试"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","补丁"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","邮件"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","外部系统"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","管理"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","底层命令"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_底层命令"]],"x":"底层命令","n":"h2","l":"\n"},{"x":"在本书中我们也遇到了不少底层的命令。","n":"p","l":"\n"},{"x":"我们遇到的第一个底层命令是在 ","n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"我们同样在 ","n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"\"}"]],"x":"Git 内部原理","n":"a","l":" 一章中对大部分的底层命令进行了介绍，这差不多正是这一章的重点所在。\n我们尽量避免了在本书的其他部分使用这些命令。"},{"a":[["id","xref--ch07-git-tools--r_branch_references"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_branch_references\"}"]],"x":"分支引用","n":"a","l":" 一节中提到了 "},{"a":[["class","literal"]],"x":"rev-parse","n":"code","l":" 命令，它可以接受任意字符串，并将其转成一个对象的 SHA-1 值。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_manual_remerge\"}"]],"x":"手动文件再合并","n":"a","l":"、 "},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_rerere\"}"]],"x":"Rerere","n":"a","l":" 及 "},{"a":[["id","xref--ch07-git-tools--r_the_index"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_the_index\"}"]],"x":"索引","n":"a","l":" 章节中使用 "},{"a":[["class","literal"]],"x":"ls-files","n":"code","l":" 来查看暂存区的更原始的样子。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"r_pr_refs\"}"]],"x":"合并请求引用","n":"a","l":" 中的 "},{"a":[["class","literal"]],"x":"ls-remote","n":"code","l":" 命令。我们用它来查看服务端的原始引用。"},{"a":[["id","_管理"]],"x":"管理","n":"h2","l":"\n"},{"x":"如果你正在管理一个 Git 仓库，或者需要通过一个复杂的方法来修复某些东西，Git 提供了一些管理命令来帮助你。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git gc"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git fsck"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git reflog"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git filter-branch"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_filter_branch"]],"x":"git filter-branch","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch09-git-and-other-scms--r_git_p4"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch09-git-and-other-scms.xhtml\", \"frag\": \"r_git_p4\"}"]],"x":"Git-p4","n":"a","l":" 和 "},{"a":[["id","xref--ch09-git-and-other-scms--r_git_tfs"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch09-git-and-other-scms.xhtml\", \"frag\": \"r_git_tfs\"}"]],"x":"TFS","n":"a","l":" 的章节中我们使用它来修复已经导入的外部仓库。"},{"a":[["id","xref--ch07-git-tools--r_removing_file_every_commit"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_removing_file_every_commit\"}"]],"x":"从每一个提交移除一个文件","n":"a","l":" 一节中，我们解释了此命令，并探究了其他几个选项，例如 "},{"a":[["class","literal"]],"x":"--commit-filter","n":"code","l":"，"},{"a":[["class","literal"]],"x":"--subdirectory-filter","n":"code","l":" 及 "},{"a":[["class","literal"]],"x":"--tree-filter","n":"code","l":" 。"},{"a":[["class","literal"]],"x":"git filter-branch","n":"code","l":" 命令用来根据某些规则来重写大量的提交记录，例如从任何地方删除文件，或者通过过滤一个仓库中的一个单独的子目录以提取出一个项目。"},{"a":[["id","_git_reflog"]],"x":"git reflog","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们主要在 ","n":"p","l":"\n"},{"x":"我们同样在 ","n":"p","l":"\n"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_data_recovery\"}"]],"x":"数据恢复","n":"a","l":" 一节中研究了一个恢复丢失的分支的实例。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_reflog\"}"]],"x":"引用日志","n":"a","l":" 一节中提到了此命令，并在展示了一般用法，及如何使用 "},{"a":[["class","literal"]],"x":"git log -g","n":"code","l":" 来通过 "},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 的输出来查看同样的信息。"},{"a":[["class","literal"]],"x":"git reflog","n":"code","l":" 命令分析你所有分支的头指针的日志来查找出你在重写历史上可能丢失的提交。"},{"a":[["id","_git_fsck"]],"x":"git fsck","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们只在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_data_recovery"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_data_recovery\"}"]],"x":"数据恢复","n":"a","l":" 这一节中快速使用了一次此命令来搜索所有的悬空对象（dangling object）。"},{"a":[["class","literal"]],"x":"git fsck","n":"code","l":" 命令用来检查内部数据库的问题或者不一致性。"},{"a":[["id","_git_gc"]],"x":"git gc","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"此命令一般在背后为你工作，虽然你可以手动执行它-如果你想的话。\n我们在","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_git_gc"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_git_gc\"}"]],"x":"维护","n":"a","l":" 一节中研究此命令的几个示例。"},{"a":[["class","literal"]],"x":"git gc","n":"code","l":" 命令在你的仓库中执行 “garbage collection” ，删除数据库中不需要的文件和将其他文件打包成一种更有效的格式。"},{"a":[["id","_外部系统"]],"x":"外部系统","n":"h2","l":"\n"},{"x":"Git 有一些可以与其他的版本控制系统集成的命令。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git svn"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git fast-import"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_fast_import"]],"x":"git fast-import","n":"h3","l":"\n"},{"x":"对于其他版本控制系统或者从其他任何的格式导入，你可以使用 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch09-git-and-other-scms--r_custom_importer"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch09-git-and-other-scms.xhtml\", \"frag\": \"r_custom_importer\"}"]],"x":"一个自定义的导入器","n":"a","l":" 一节中深入讲解了此命令。"},{"a":[["class","literal"]],"x":"git fast-import","n":"code","l":" 快速地将其他格式映射到 Git 可以轻松记录的格式。"},{"a":[["id","_git_svn"]],"x":"git svn","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"n":"p","l":"\n"},{"a":[["id","xref--ch09-git-and-other-scms--r_git_svn"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch09-git-and-other-scms.xhtml\", \"frag\": \"r_git_svn\"}"]],"x":"Git 与 Subversion","n":"a","l":" 一章深入讲解了此命令。"},{"a":[["class","literal"]],"x":"git svn","n":"code","l":" 可以使 Git 作为一个客户端来与 Subversion 版本控制系统通信。\n这意味着你可以使用 Git 来检出内容，或者提交到 Subversion 服务器。"},{"a":[["id","_邮件"]],"x":"邮件","n":"h2","l":"\n"},{"x":"很多 Git 项目，包括 Git 本身，基本是通过邮件列表来维护的。\n从方便地生成邮件补丁到从一个邮箱中应用这些补丁,Git 都有工具来让这些操作变得简单。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git apply"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git am"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git format-patch"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git imap-send"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git send-email"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git request-pull"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_request_pull"]],"x":"git request-pull","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_public_project\"}"]],"x":"派生的公开项目","n":"a","l":" 一节中演示了如何使用 "},{"a":[["class","literal"]],"x":"git request-pull","n":"code","l":" 来生成一个推送消息。"},{"a":[["class","literal"]],"x":"git request-pull","n":"code","l":" 命令只是简单的用来生成一个可通过邮件发送给某个人的示例信息体。\n如果你在公共服务器上有一个分支，并且想让别人知道如何集成这些变更，而不用通过邮件发送补丁，你就可以执行此命令的输出发送给这个你想拉取变更的人。"},{"a":[["id","_git_send_email"]],"x":"git send-email","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_project_over_email\"}"]],"x":"通过邮件的公开项目","n":"a","l":" 一节中研究了一个使用 "},{"a":[["class","literal"]],"x":"git send-email","n":"code","l":" 工具发送补丁来为一个项目做贡献的示例。"},{"a":[["class","literal"]],"x":"git send-mail","n":"code","l":" 命令用来通过邮件发送那些使用 "},{"a":[["class","literal"]],"x":"git format-patch","n":"code","l":" 生成的补丁。"},{"a":[["id","_git_imap_send"]],"x":"git imap-send","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git imap-send","n":"code","l":" 将一个由 "},{"a":[["class","literal"]],"x":"git format-patch","n":"code","l":" 生成的邮箱上传至 IMAP 草稿文件夹。\n我们在 "},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_project_over_email\"}"]],"x":"通过邮件的公开项目","n":"a","l":" 一节中见过一个通过使用 "},{"a":[["class","literal"]],"x":"git imap-send","n":"code","l":" 工具向一个项目发送补丁进行贡献的例子。"},{"a":[["id","_git_format_patch"]],"x":"git format-patch","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch05-distributed-git--r_project_over_email"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_project_over_email\"}"]],"x":"通过邮件的公开项目","n":"a","l":" 一节中研究了一个使用 "},{"a":[["class","literal"]],"x":"git format-patch","n":"code","l":" 工具为一个项目做贡献的示例。"},{"a":[["class","literal"]],"x":"git format-patch","n":"code","l":" 命令用来以 mbox 的格式来生成一系列的补丁以便你可以发送到一个邮件列表中。"},{"a":[["id","_git_am"]],"x":"git am","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch06-github--r_email_notifications"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"r_email_notifications\"}"]],"x":"邮件通知","n":"a","l":" 一节中我们也将用此命令来应用 格式化的 GitHub的推送请求的变更。"},{"a":[["id","xref--ch08-customizing-git--r_email_hooks"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"r_email_hooks\"}"]],"x":"电子邮件工作流钩子","n":"a","l":" 也提到了几条 hooks，你可以用来辅助与 "},{"a":[["class","literal"]],"x":"git am","n":"code","l":" 相关工作流。"},{"a":[["id","xref--ch05-distributed-git--r_git_am"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_git_am\"}"]],"x":"使用 ","n":"a","l":" 命令中提到了它的用法及工作流，包括使用 "},{"a":[["class","literal"]],"x":"--resolved","n":"code","l":"、"},{"a":[["class","literal"]],"x":"-i","n":"code","l":" 及 "},{"a":[["class","literal"]],"x":"-3","n":"code","l":" 选项。"},{"a":[["class","literal"]],"x":"am","n":"code","l":" 命令应用补丁"},{"a":[["class","literal"]],"x":"git am","n":"code","l":" 命令用来应用来自邮箱的补丁。特别是那些被 mbox 格式化过的。\n这对于通过邮件接受补丁并将他们轻松地应用到你的项目中很有用。"},{"a":[["id","_git_apply"]],"x":"git apply","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch05-distributed-git--r_patches_from_email"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_patches_from_email\"}"]],"x":"应用来自邮件的补丁","n":"a","l":" 一节中演示了它的使用及什么环境下你可能会用到它。"},{"a":[["class","literal"]],"x":"git apply","n":"code","l":" 命令应用一个通过 "},{"a":[["class","literal"]],"x":"git diff","n":"code","l":" 或者甚至使用 GNU diff 命令创建的补丁。\n它跟补丁命令做了差不多的工作，但还是有一些小小的差别。"},{"a":[["id","_补丁"]],"x":"补丁","n":"h2","l":"\n"},{"x":"Git 中的一些命令是以引入的变更即提交这样的概念为中心的，这样一系列的提交，就是一系列的补丁。\n这些命令以这样的方式来管理你的分支。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git cherry-pick"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git rebase"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git revert"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_revert"]],"x":"git revert","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_reverse_commit"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_reverse_commit\"}"]],"x":"还原提交","n":"a","l":" 一节中使用此命令来撤销一个合并提交。"},{"a":[["class","literal"]],"x":"git revert","n":"code","l":" 命令本质上就是一个逆向的 "},{"a":[["class","literal"]],"x":"git cherry-pick","n":"code","l":" 操作。\n它将你提交中的变更的以完全相反的方式的应用到一个新创建的提交中，本质上就是撤销或者倒转。"},{"a":[["id","_git_rebase"]],"x":"git rebase","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_changing_multiple"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_changing_multiple\"}"]],"x":"修改多个提交信息","n":"a","l":" 一节中，我们也结合 "},{"a":[["class","literal"]],"x":"-i","n":"code","l":" 选项将其用于交互式的脚本模式。"},{"a":[["id","xref--ch07-git-tools--r_rerere"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_rerere\"}"]],"x":"Rerere","n":"a","l":" 一节中，我们研究了在变基时遇到的合并冲突的问题。"},{"a":[["id","xref--ch07-git-tools--r_replace"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_replace\"}"]],"x":"替换","n":"a","l":" 中我们在一个分离历史记录到两个单独的仓库的示例中实践了此命令，同时使用了 "},{"a":[["class","literal"]],"x":"--onto","n":"code","l":" 选项。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_rebasing\"}"]],"x":"变基","n":"a","l":" 一章中详细提到了此命令，包括与已经公开的分支的变基所涉及的协作问题。"},{"a":[["class","literal"]],"x":"git rebase","n":"code","l":" 命令基本是是一个自动化的 "},{"a":[["class","literal"]],"x":"cherry-pick","n":"code","l":" 命令。\n它计算出一系列的提交，然后再以它们在其他地方以同样的顺序一个一个的 "},{"a":[["class","literal"]],"x":"cherry-picks","n":"code","l":" 出它们。"},{"a":[["id","_git_cherry_pick"]],"x":"git cherry-pick","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch05-distributed-git--r_rebase_cherry_pick"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_rebase_cherry_pick\"}"]],"x":"变基与拣选工作流","n":"a","l":" 一节中描述和演示了 "},{"a":[["class","literal"]],"x":"Cherry picking","n":"code"},{"a":[["class","literal"]],"x":"git cherry-pick","n":"code","l":" 命令用来获得在单个提交中引入的变更，然后尝试将作为一个新的提交引入到你当前分支上。\n从一个分支单独一个或者两个提交而不是合并整个分支的所有变更是非常有用的。"},{"a":[["id","_调试"]],"x":"调试","n":"h2","l":"\n"},{"x":"Git 有一些命令可以用来帮你调试你代码中的问题。\n包括找出是什么时候，是谁引入的变更。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git bisect"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git blame"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git grep"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_grep"]],"x":"git grep","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"只有 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_git_grep"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_grep\"}"]],"x":"Git Grep","n":"a","l":" 的章节中与提到此命令。"},{"a":[["class","literal"]],"x":"git grep","n":"code","l":" 命令可以帮助在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式。"},{"a":[["id","_git_blame"]],"x":"git blame","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"只有 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_file_annotation"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_file_annotation\"}"]],"x":"文件标注","n":"a","l":" 一节有中提到此命令。"},{"a":[["class","literal"]],"x":"git blame","n":"code","l":" 命令标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者。\n当你要找那个人去询问关于这块特殊代码的信息时这会很有用。"},{"a":[["id","_git_bisect"]],"x":"git bisect","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"仅在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_binary_search"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_binary_search\"}"]],"x":"二分查找","n":"a","l":" 一节中完整的介绍了此命令。"},{"a":[["class","literal"]],"x":"git bisect","n":"code","l":" 工具是一个非常有用的调试工具，它通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。"},{"a":[["id","_检查与比较"]],"x":"检查与比较","n":"h2","l":"\n"},{"a":[["class","sect2"],["title","git show"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git shortlog"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git describe"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_describe"]],"x":"git describe","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch05-distributed-git--r_build_number"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_build_number\"}"]],"x":"生成一个构建号","n":"a","l":" 及 "},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_preparing_release\"}"]],"x":"准备一次发布","n":"a","l":" 章节中使用 "},{"a":[["class","literal"]],"x":"git describe","n":"code","l":" 命令来获得一个字符串来命名我们发布的文件。"},{"a":[["class","literal"]],"x":"git describe","n":"code","l":" 命令用来接受任何可以解析成一个提交的东西，然后生成一个人类可读的字符串且不可变。\n这是一种获得一个提交的描述的方式，它跟一个提交的 SHA-1 值一样是无歧义，但是更具可读性。"},{"a":[["id","_git_shortlog"]],"x":"git shortlog","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch05-distributed-git--r_the_shortlog"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_the_shortlog\"}"]],"x":"制作提交简报","n":"a","l":" 一节中展示了如何使用此命令来创建一个漂亮的 changelog 文件。"},{"a":[["class","literal"]],"x":"git shortlog","n":"code","l":" 是一个用来归纳 "},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 的输出的命令。\n它可以接受很多与 "},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 相同的选项，但是此命令并不会列出所有的提交，而是展示一个根据作者分组的提交记录的概括性信息"},{"a":[["id","_git_show"]],"x":"git show","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"然后，我们在 ","n":"p","l":"\n"},{"x":"我们使用 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git show","n":"code","l":" 做的最有意思的事情是在 "},{"a":[["id","xref--ch07-git-tools--r_manual_remerge"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_manual_remerge\"}"]],"x":"手动文件再合并","n":"a","l":" 一节中用来在合并冲突的多个暂存区域中提取指定文件的内容。"},{"a":[["id","xref--ch07-git-tools--r_revision_selection"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_revision_selection\"}"]],"x":"选择修订版本","n":"a","l":" 一节中，用了很多次来显示不同的版本选择将解析出来的提交。"},{"a":[["id","xref--ch02-git-basics--r_annotated_tags"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_annotated_tags\"}"]],"x":"附注标签","n":"a","l":" 一节中使用此命令来显示带注解标签的信息。"},{"a":[["class","literal"]],"x":"git show","n":"code","l":" 命令可以以一种简单的人类可读的方式来显示一个 Git 对象。\n你一般使用此命令来显示一个标签或一个提交的信息。"},{"a":[["id","_项目分享与更新"]],"x":"项目分享与更新","n":"h2","l":"\n"},{"x":"在 Git 中没有多少访问网络的命令，几乎所以的命令都是在操作本地的数据库。\n当你想要分享你的工作，或者从其他地方拉取变更时，这有几个处理远程仓库的命令。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git fetch"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git pull"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git push"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git remote"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git archive"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git submodule"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_submodule"]],"x":"git submodule","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"只在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_git_submodules"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_submodules\"}"]],"x":"子模块","n":"a","l":" 章节中提到和详细介绍了此命令。"},{"a":[["class","literal"]],"x":"git submodule","n":"code","l":" 命令用来管理一个仓库的其他外部仓库。\n它可以被用在库或者其他类型的共享资源上。\n"},{"a":[["class","literal"]],"x":"submodule","n":"code","l":" 命令有几个子命令, 如（"},{"a":[["class","literal"]],"x":"add","n":"code","l":"、"},{"a":[["class","literal"]],"x":"update","n":"code","l":"、"},{"a":[["class","literal"]],"x":"sync","n":"code","l":" 等等）用来管理这些资源。"},{"a":[["id","_git_archive"]],"x":"git archive","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch05-distributed-git--r_preparing_release"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_preparing_release\"}"]],"x":"准备一次发布","n":"a","l":" 一节中，使用 "},{"a":[["class","literal"]],"x":"git archive","n":"code","l":" 命令来创建一个项目的归档文件用于分享。"},{"a":[["class","literal"]],"x":"git archive","n":"code","l":" 命令用来创建项目一个指定快照的归档文件。"},{"a":[["id","_git_remote"]],"x":"git remote","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"此命令在 ","n":"p","l":"\n"},{"x":"几乎在此书的后续章节中都有使用此命令，但是一般是以 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git remote add <name> <url>","n":"code","l":" 这样的标准格式。"},{"a":[["id","xref--ch02-git-basics--r_remote_repos"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_remote_repos\"}"]],"x":"远程仓库的使用","n":"a","l":" 一节中做了详细的介绍，包括列举、添加、移除、重命名功能。"},{"a":[["class","literal"]],"x":"git remote","n":"code","l":" 命令是一个是你远程仓库记录的管理工具。\n它允许你将一个长的 URL 保存成一个简写的句柄，例如 "},{"a":[["class","literal"]],"x":"origin","n":"code","l":" ，这样你就可以不用每次都输入他们了。\n你可以有多个这样的句柄，"},{"a":[["class","literal"]],"x":"git remote","n":"code","l":" 可以用来添加，修改，及删除它们。"},{"a":[["id","_git_push"]],"x":"git push","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们开始在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_pushing_refspecs"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_pushing_refspecs\"}"]],"x":"引用规格推送","n":"a","l":" 一节中，我们知道了使用完整的 refspec 来推送，而不是通常使用的简写形式。\n这对我们精确的指定要分享出去的工作很有帮助。"},{"a":[["id","xref--ch08-customizing-git--r_other_client_hooks"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"r_other_client_hooks\"}"]],"x":"其它客户端钩子","n":"a","l":" 中我们简单的提到了 "},{"a":[["class","literal"]],"x":"pre-push","n":"code","l":" 挂钩（hook），它是一个可以用来设置成在一个推送完成之前运行的脚本，以检查推送是否被允许。"},{"a":[["id","xref--ch07-git-tools--r_publishing_submodules"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_publishing_submodules\"}"]],"x":"发布子模块改动","n":"a","l":" 一节中，我们使用 "},{"a":[["class","literal"]],"x":"--recurse-submodules","n":"code","l":" 选项来检查是否我们所有的子模块的工作都已经在推送子项目之前已经推送出去了，当使用子模块时这真的很有帮助。"},{"a":[["id","xref--ch02-git-basics--r_sharing_tags"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_sharing_tags\"}"]],"x":"共享标签","n":"a","l":" 一节中，我们知道了如何使用此命令加 "},{"a":[["class","literal"]],"x":"--tags","n":"code","l":" 选项来分享你打的标签。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_contributing_project\"}"]],"x":"向一个项目贡献","n":"a","l":" 一整节中，我们看到了几个使用 "},{"a":[["class","literal"]],"x":"git push","n":"code","l":" 在多个远程仓库分享分支中的工作的示例。"},{"a":[["id","xref--ch02-git-basics--r_pushing_remotes"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_pushing_remotes\"}"]],"x":"推送到远程仓库","n":"a","l":" 一节中介绍了 "},{"a":[["class","literal"]],"x":"git push","n":"code","l":" 命令。\n在这一节中主要介绍了推送一个分支到远程仓库的基本用法。\n在 "},{"a":[["id","xref--ch03-git-branching--r_pushing_branches"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_pushing_branches\"}"]],"x":"推送","n":"a","l":" 一节中，我们深入了解了如何推送指定分支，在 "},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_tracking_branches\"}"]],"x":"跟踪分支","n":"a","l":" 一节中我们了解了如何设置一个默认的推送的跟踪分支。\n在 "},{"a":[["id","xref--ch03-git-branching--r_delete_branches"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_delete_branches\"}"]],"x":"删除远程分支","n":"a","l":" 一节中我们使用 "},{"a":[["class","literal"]],"x":"--delete","n":"code","l":" 标志和 "},{"a":[["class","literal"]],"x":"git push","n":"code","l":" 命令来在删除一个在服务器上的分支。"},{"a":[["class","literal"]],"x":"git push","n":"code","l":" 命令用来与另一个仓库通信，计算你本地数据库与远程仓库的差异，然后将差异推送到另一个仓库中。\n它需要有另一个仓库的写权限，因此这通常是需要验证的。"},{"a":[["id","_git_pull"]],"x":"git pull","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"我们也在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，我们在 ","n":"p","l":"\n"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_signing_commits\"}"]],"x":"签署提交","n":"a","l":" 一节中我们快速的介绍了你可以使用 "},{"a":[["class","literal"]],"x":"--verify-signatures","n":"code","l":" 选项来验证你正在拉取下来的经过 GPG 签名的提交。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_checking_out_conflicts\"}"]],"x":"检出冲突","n":"a","l":" 一节中我们展示了使用此命令如何通过一个 URL 来一次性的拉取变更。"},{"a":[["id","xref--ch03-git-branching--r_rebase_rebase"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_rebase_rebase\"}"]],"x":"用变基解决变基","n":"a","l":" 一节中了解了如何使用此命令来来处理变基的难题。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_fetching_and_pulling\"}"]],"x":"从远程仓库中抓取与拉取","n":"a","l":" 一节中快速介绍了此命令，然后在 "},{"a":[["id","xref--ch02-git-basics--r_inspecting_remote"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_inspecting_remote\"}"]],"x":"查看远程仓库","n":"a","l":" 一节中了解了如果你运行此命令的话，什么将会合并。"},{"a":[["class","literal"]],"x":"git pull","n":"code","l":" 命令基本上就是 "},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"git merge","n":"code","l":" 命令的组合体，Git 从你指定的远程仓库中抓取内容，然后马上尝试将其合并进你所在的分支中。"},{"a":[["id","_git_fetch"]],"x":"git fetch","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们开始在 ","n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_refspec"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_refspec\"}"]],"x":"引用规格","n":"a","l":" 章节中我们设置了高度自定义的 "},{"a":[["class","literal"]],"x":"refspec","n":"code","l":" 以便 "},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":" 可以做一些跟默认不同的事情。"},{"a":[["id","xref--ch06-github--r_pr_refs"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch06-github.xhtml\", \"frag\": \"r_pr_refs\"}"]],"x":"合并请求引用","n":"a","l":" 我们用它来抓取一个在默认空间之外指定的引用，在 "},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_bundling\"}"]],"x":"打包","n":"a","l":" 中，我们了解了怎么从一个包中获取内容。"},{"a":[["id","xref--ch05-distributed-git--r_contributing_project"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_contributing_project\"}"]],"x":"向一个项目贡献","n":"a","l":" 一节中有几个示例中也都有使用此命令。"},{"a":[["id","xref--ch02-git-basics--r_fetching_and_pulling"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_fetching_and_pulling\"}"]],"x":"从远程仓库中抓取与拉取","n":"a","l":" 一节中介绍了此命令，然后我们在 "},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_remote_branches\"}"]],"x":"远程分支","n":"a","l":" 中看到了几个使用示例。"},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":" 命令与一个远程的仓库交互，并且将远程仓库中有但是在当前仓库的没有的所有信息拉取下来然后存储在你本地数据库中。"},{"a":[["id","_分支与合并"]],"x":"分支与合并","n":"h2","l":"\n"},{"x":"Git 有几个实现大部的分支及合并功能的实用命令。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git branch"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git checkout"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git merge"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git mergetool"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git log"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git stash"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git tag"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_tag"]],"x":"git tag","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"我也在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_signing"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_signing\"}"]],"x":"签署工作","n":"a","l":" 一节中介绍了如何使用 "},{"a":[["class","literal"]],"x":"-s","n":"code","l":" 标志创建一个 GPG 签名的标签，然后使用 "},{"a":[["class","literal"]],"x":"-v","n":"code","l":" 选项来验证。"},{"a":[["id","xref--ch02-git-basics--r_git_tagging"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_git_tagging\"}"]],"x":"打标签","n":"a","l":" 一节中介绍了此命令及相关细节，并在 "},{"a":[["id","xref--ch05-distributed-git--r_tagging_releases"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_tagging_releases\"}"]],"x":"为发布打标签","n":"a","l":" 一节实践了此命令。"},{"a":[["class","literal"]],"x":"git tag","n":"code","l":" 命令用来为代码历史记录中的某一个点指定一个永久的书签。\n一般来说它用于发布相关事项。"},{"a":[["id","_git_stash"]],"x":"git stash","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_git_stashing"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_stashing\"}"]],"x":"储藏与清理","n":"a","l":" 一整个章节基本就是在讲这个命令。"},{"a":[["class","literal"]],"x":"git stash","n":"code","l":" 命令用来临时地保存一些还没有提交的工作，以便在分支上不需要提交未完成工作就可以清理工作目录。"},{"a":[["id","_git_log"]],"x":"git log","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"在本书的每一章几乎都有用到此命令来描述一个项目的历史。","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 <_merge_log>> 和 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_signing_commits\"}"]],"x":"签署提交","n":"a","l":" 一节中，我们了解了如何使用 "},{"a":[["class","literal"]],"x":"--show-signature","n":"code","l":" 来为每一个提交的 "},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 输出中，添加一个判断是否已经合法的签名的一个验证。"},{"a":[["id","xref--ch07-git-tools--r_searching"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_searching\"}"]],"x":"搜索","n":"a","l":" 一节中我们研究了`-S` 及 "},{"a":[["class","literal"]],"x":"-L","n":"code","l":" 选项来进行来在代码的历史变更中进行相当优雅地搜索，如一个函数的历史。"},{"a":[["id","xref--ch07-git-tools--r_git_reflog"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_reflog\"}"]],"x":"引用日志","n":"a","l":" 一节中我们使用此工具和 "},{"a":[["class","literal"]],"x":"-g","n":"code","l":" 选项 而不是遍历分支来查看 Git 的 "},{"a":[["class","literal"]],"x":"reflog","n":"code","l":"。"},{"a":[["id","xref--ch07-git-tools--r_triple_dot"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_triple_dot\"}"]],"x":"三点","n":"a","l":" 章节中，我们介绍了 "},{"a":[["class","literal"]],"x":"branchA...branchB","n":"code","l":" 格式和 "},{"a":[["class","literal"]],"x":"--left-right","n":"code","l":" 语法来查看哪些仅其中一个分支。\n在 "},{"a":[["id","xref--ch07-git-tools--r_merge_log"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_merge_log\"}"]],"x":"合并日志","n":"a","l":" 一节中我们还研究了如何使用 "},{"a":[["class","literal"]],"x":"--merge","n":"code","l":" 选项来帮助合并冲突调试，同样也使用 "},{"a":[["class","literal"]],"x":"--cc","n":"code","l":" 选项来查看在你历史记录中的合并提交的冲突。"},{"a":[["id","xref--ch05-distributed-git--r_private_team"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_private_team\"}"]],"x":"私有小型团队","n":"a","l":" 和 "},{"a":[["id","xref--ch07-git-tools--r_commit_ranges"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_commit_ranges\"}"]],"x":"提交区间","n":"a","l":" 章节中，我们介绍了在使用 "},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 命令时用 "},{"a":[["class","literal"]],"x":"branchA..branchB","n":"code","l":" 的语法来查看一个分支相对于另一个分支, 哪一些提交是唯一的。\n在 "},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_commit_ranges\"}"]],"x":"提交区间","n":"a","l":" 一节中我们作了更多介绍。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_create_new_branch\"}"]],"x":"分支创建","n":"a","l":" 一节中我们使用它加 "},{"a":[["class","literal"]],"x":"--decorate","n":"code","l":" 选项来简单的可视化我们分支的指针所在，同时我们使用 "},{"a":[["class","literal"]],"x":"--graph","n":"code","l":" 选项来查看分叉的历史记录是怎么样的。"},{"a":[["id","xref--ch02-git-basics--r_viewing_history"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_viewing_history\"}"]],"x":"查看提交历史","n":"a","l":" 一节中我们介绍了此命令，并深入做了研究。\n研究了包括 "},{"a":[["class","literal"]],"x":"-p","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"--stat","n":"code","l":" 选项来了解每一个提交引入的变更，及使用`--pretty` 和 "},{"a":[["class","literal"]],"x":"--online","n":"code","l":" 选项来查看简洁的历史记录。"},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 命令用来展示一个项目的可达历史记录，从最近的提交快照起。\n默认情况下，它只显示你当前所在分支的历史记录，但是可以显示不同的甚至多个头记录或分支以供遍历。\n此命令通常也用来在提交记录级别显示两个或多个分支之间的差异。"},{"a":[["id","_git_mergetool"]],"x":"git mergetool","n":"h3","l":"\n"},{"x":"当你在 Git 的合并中遇到问题时，可以使用 ","n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_basic_merge_conflicts\"}"]],"x":"遇到冲突时的分支合并","n":"a","l":" 中快速介绍了一下它，然后在 "},{"a":[["id","xref--ch08-customizing-git--r_external_merge_tools"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"r_external_merge_tools\"}"]],"x":"外部的合并与比较工具","n":"a","l":" 一节中介绍了如何实现你自己的外部合并工具的细节。"},{"a":[["class","literal"]],"x":"git mergetool","n":"code","l":" 来启动一个外部的合并帮助工具。"},{"a":[["id","_git_merge"]],"x":"git merge","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们首先在 ","n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_subtree_merge"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_subtree_merge\"}"]],"x":"子树合并","n":"a","l":" 一节中学习了子树合并。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_signing_commits\"}"]],"x":"签署提交","n":"a","l":" 一节中我们学习了如何在合并前验证签名，如果你项目正在使用 GPG 签名的话。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_advanced_merging\"}"]],"x":"高级合并","n":"a","l":" 一节中，我们介绍了合并的过程及命令，包含 "},{"a":[["class","literal"]],"x":"-Xignore-space-change","n":"code","l":" 命令及 "},{"a":[["class","literal"]],"x":"--abort","n":"code","l":" 选项来中止一个有问题的提交。"},{"a":[["id","xref--ch05-distributed-git--r_public_project"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_public_project\"}"]],"x":"派生的公开项目","n":"a","l":" 的后面介绍了如何做一个 "},{"a":[["class","literal"]],"x":"squashed merge","n":"code","l":" （指 Git 合并时将其当作一个新的提交而不是记录你合并时的分支的历史记录。）"},{"a":[["id","xref--ch03-git-branching--r_basic_branching"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_basic_branching\"}"]],"x":"新建分支","n":"a","l":" 一节中介绍了 "},{"a":[["class","literal"]],"x":"git merge","n":"code","l":" 命令。\n虽然它在本书的各种地方都有用到，但是 "},{"a":[["class","literal"]],"x":"merge","n":"code","l":" 命令只有几个变种，一般只是 "},{"a":[["class","literal"]],"x":"git merge <branch>","n":"code","l":" 带上一个你想合并进来的一个分支名称。"},{"a":[["class","literal"]],"x":"git merge","n":"code","l":" 工具用来合并一个或者多个分支到你已经检出的分支中。\n然后它将当前分支指针移动到合并结果上。"},{"a":[["id","_git_checkout"]],"x":"git checkout","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们是在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_the_head"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_the_head\"}"]],"x":"HEAD 引用","n":"a","l":" 一节中介绍了此命令的一些实现细节。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_reset\"}"]],"x":"重置揭密","n":"a","l":" 一节中，我们进一步了解了其细节及与 "},{"a":[["class","literal"]],"x":"git reset","n":"code","l":" 的关系。"},{"a":[["id","xref--ch07-git-tools--r_checking_out_conflicts"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_checking_out_conflicts\"}"]],"x":"检出冲突","n":"a","l":" 一节中，我们用此命令和 "},{"a":[["class","literal"]],"x":"--conflict=diff3","n":"code","l":" 来重新介绍文件冲突。"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_tracking_branches\"}"]],"x":"跟踪分支","n":"a","l":" 一节中我们了解了如何使用 "},{"a":[["class","literal"]],"x":"--track","n":"code","l":" 标志来开始跟踪分支。"},{"a":[["id","xref--ch03-git-branching--r_switching_branches"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_switching_branches\"}"]],"x":"分支切换","n":"a","l":" 一节中第一次认识了命令及 "},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 命令。"},{"a":[["class","literal"]],"x":"git checkout","n":"code","l":" 命令用来切换分支，或者检出内容到工作目录。"},{"a":[["id","_git_branch"]],"x":"git branch","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_git_refs"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_git_refs\"}"]],"x":"Git 引用","n":"a","l":" 一节中讲到了它在背后做一什么。"},{"a":[["id","xref--ch03-git-branching--r_tracking_branches"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_tracking_branches\"}"]],"x":"跟踪分支","n":"a","l":" 一节中，我们使用 "},{"a":[["class","literal"]],"x":"git branch -u","n":"code","l":" 选项来设置一个跟踪分支。"},{"a":[["id","xref--ch03-git-branching"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"\"}"]],"x":"Git 分支","n":"a","l":" 一节主要是为 "},{"a":[["class","literal"]],"x":"branch","n":"code","l":" 命令来设计的，它贯穿了整个章节。\n首先，我们在 "},{"a":[["id","xref--ch03-git-branching--r_create_new_branch"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_create_new_branch\"}"]],"x":"分支创建","n":"a","l":" 一节中介绍了它，然后我们在 "},{"a":[["id","xref--ch03-git-branching--r_branch_management"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_branch_management\"}"]],"x":"分支管理","n":"a","l":" 一节中介绍了它的其它大部分特性（列举及删除）。"},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 命令实际上是某种程度上的分支管理工具。\n它可以列出你所有的分支、创建新分支、删除分支及重命名分支。"},{"a":[["id","_快照基础"]],"x":"快照基础","n":"h2","l":"\n"},{"x":"对于基本的暂存内容及提交到你的历史记录中的工作流，只有少数基本的命令。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git add"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git status"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git diff"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git difftool"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git commit"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git reset"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git rm"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git mv"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git clean"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_clean"]],"x":"git clean","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_git_clean"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_clean\"}"]],"x":"清理工作目录","n":"a","l":" 一节中我们介绍了你可能会使用 "},{"a":[["class","literal"]],"x":"clean","n":"code","l":" 命令的大量选项及场景。"},{"a":[["class","literal"]],"x":"git clean","n":"code","l":" 是一个用来从工作区中移除不想要的文件的命令。\n可以是编译的临时文件或者合并冲突的文件。"},{"a":[["id","_git_mv"]],"x":"git mv","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们只是在 ","n":"p","l":"\n"},{"a":[["id","xref--ch02-git-basics--r_git_mv"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_git_mv\"}"]],"x":"移动文件","n":"a","l":" 一节中简单地提到了此命令。"},{"a":[["class","literal"]],"x":"git mv","n":"code","l":" 命令是一个便利命令，用于移到一个文件并且在新文件上执行`git add`命令及在老文件上执行`git rm`命令。"},{"a":[["id","_git_rm"]],"x":"git rm","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"在本书的 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_removing_objects"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_removing_objects\"}"]],"x":"移除对象","n":"a","l":" 一节中，介绍了 "},{"a":[["class","literal"]],"x":"git rm","n":"code","l":" 仅有的几种不同用法，如在执行 "},{"a":[["class","literal"]],"x":"git filter-branch","n":"code","l":" 中使用和解释了 "},{"a":[["class","literal"]],"x":"--ignore-unmatch","n":"code","l":" 选项。\n这对脚本来说很有用。"},{"a":[["id","xref--ch02-git-basics--r_removing_files"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_removing_files\"}"]],"x":"移除文件","n":"a","l":" 一节中提到了 "},{"a":[["class","literal"]],"x":"git rm","n":"code","l":" 的一些细节，包括递归地移除文件，和使用 "},{"a":[["class","literal"]],"x":"--cached","n":"code","l":" 选项来只移除暂存区域的文件但是保留工作区的文件。"},{"a":[["class","literal"]],"x":"git rm","n":"code","l":" 是 Git 用来从工作区，或者暂存区移除文件的命令。\n在为下一次提交暂存一个移除操作上，它与 "},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 有一点类似。"},{"a":[["id","_git_reset"]],"x":"git reset","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"首先，我们在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_abort_merge"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_abort_merge\"}"]],"x":"中断一次合并","n":"a","l":" 一节中，我们使用 "},{"a":[["class","literal"]],"x":"git reset --hard","n":"code","l":" 来取消一个合并，同时我们也使用了 "},{"a":[["class","literal"]],"x":"git merge --abort","n":"code","l":" 命令，它是 "},{"a":[["class","literal"]],"x":"git reset","n":"code","l":" 的一个简单的封装。"},{"a":[["id","xref--ch07-git-tools--r_git_reset"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_reset\"}"]],"x":"重置揭密","n":"a","l":" 一节中我们详细介绍了此命令，几乎整节都在解释此命令。"},{"a":[["id","xref--ch02-git-basics--r_unstaging"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_unstaging\"}"]],"x":"取消暂存的文件","n":"a","l":" 一节中介绍了 "},{"a":[["class","literal"]],"x":"git reset","n":"code","l":" 简单高效的用法，用来对执行过 "},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 命令的文件取消暂存。"},{"a":[["class","literal"]],"x":"git reset","n":"code","l":" 命令主要用来根据你传递给动作的参数来执行撤销操作。\n它可以移动 "},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 指针并且可选的改变 "},{"a":[["class","literal"]],"x":"index","n":"code","l":" 或者暂存区，如果你使用 "},{"a":[["class","literal"]],"x":"--hard","n":"code","l":" 参数的话你甚至可以改变工作区。\n如果错误地为这个命令附加后面的参数，你可能会丢失你的工作，所以在使用前你要确定你已经完全理解了它。"},{"a":[["id","_git_commit"]],"x":"git commit","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"首先，我们在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_git_commit_objects"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_git_commit_objects\"}"]],"x":"提交对象","n":"a","l":" 一节中，我们了解了 "},{"a":[["class","literal"]],"x":"git commit","n":"code","l":" 在背后做了什么，及它是如何实现的。"},{"a":[["id","xref--ch07-git-tools--r_signing_commits"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_signing_commits\"}"]],"x":"签署提交","n":"a","l":" 一节中我们探讨了如何使用 "},{"a":[["class","literal"]],"x":"-S","n":"code","l":" 标志来为提交签名加密。"},{"a":[["id","xref--ch03-git-branching--r_git_branches_overview"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_git_branches_overview\"}"]],"x":"分支简介","n":"a","l":"，我们探讨了 "},{"a":[["class","literal"]],"x":"git commit","n":"code","l":" 的更多细节，及工作原理。"},{"a":[["id","xref--ch02-git-basics--r_undoing"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_undoing\"}"]],"x":"撤消操作","n":"a","l":" 一节中我们介绍了使用 "},{"a":[["class","literal"]],"x":"--amend","n":"code","l":" 选项来重做最后的提交。"},{"a":[["id","xref--ch02-git-basics--r_committing_changes"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_committing_changes\"}"]],"x":"提交更新","n":"a","l":" 一节中涉及了此命令的基本用法。\n我们演示了如何在日常的工作流程中通过使用 "},{"a":[["class","literal"]],"x":"-a","n":"code","l":" 标志来跳过 "},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 这一步，及如何使用 "},{"a":[["class","literal"]],"x":"-m","n":"code","l":" 标志通过命令行而不启动一个编辑器来传递提交信息。"},{"a":[["class","literal"]],"x":"git commit","n":"code","l":" 命令将所有通过 "},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 暂存的文件内容在数据库中创建一个持久的快照，然后将当前分支上的分支指针移到其之上。"},{"a":[["id","_git_difftool"]],"x":"git difftool","n":"h3","l":"\n"},{"x":"当你不想使用内置的 ","n":"p","l":"\n"},{"x":"我们只在 ","n":"p","l":"\n"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_git_diff_staged\"}"]],"x":"查看已暂存和未暂存的修改","n":"a","l":" 一节中简单的提到了此命令。"},{"a":[["class","literal"]],"x":"git diff","n":"code","l":" 命令时。"},{"a":[["class","literal"]],"x":"git difftool","n":"code","l":" 可以用来简单地启动一个外部工具来为你展示两棵树之间的差异。"},{"a":[["id","_git_diff"]],"x":"git diff","n":"h3","l":"\n"},{"x":"当需要查看任意两棵树的差异时你可以使用 ","n":"p","l":"\n"},{"x":"首先，我们在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_starting_submodules"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_starting_submodules\"}"]],"x":"开始使用子模块","n":"a","l":" 一节中,我们使用此命令合 "},{"a":[["class","literal"]],"x":"--submodule","n":"code","l":" 选项来有效地比较子模块的变化。"},{"a":[["id","xref--ch07-git-tools--r_advanced_merging"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_advanced_merging\"}"]],"x":"高级合并","n":"a","l":" 一节中我们使用 "},{"a":[["class","literal"]],"x":"-b","n":"code","l":" 选项来过滤掉空白字符的差异，及通过 "},{"a":[["class","literal"]],"x":"--theirs","n":"code","l":"、"},{"a":[["class","literal"]],"x":"--ours","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"--base","n":"code","l":" 选项来比较不同暂存区冲突文件的差异。"},{"a":[["id","xref--ch05-distributed-git--r_what_is_introduced"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_what_is_introduced\"}"]],"x":"确定引入了哪些东西","n":"a","l":" 一节中,了解了使用 "},{"a":[["class","literal"]],"x":"git diff A...B","n":"code","l":" 语法来更有效地比较不同分支之间的差异。"},{"a":[["id","xref--ch05-distributed-git--r_commit_guidelines"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"r_commit_guidelines\"}"]],"x":"提交准则","n":"a","l":" 一节中,我们在提交前使用 "},{"a":[["class","literal"]],"x":"--check","n":"code","l":" 选项来检查可能存在的空白字符问题。"},{"a":[["id","xref--ch02-git-basics--r_git_diff_staged"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_git_diff_staged\"}"]],"x":"查看已暂存和未暂存的修改","n":"a","l":" 一章中研究了 "},{"a":[["class","literal"]],"x":"git diff","n":"code","l":" 的基本用法，在此节中我们展示了如何查看哪些变化已经暂存了，哪些没有。"},{"a":[["class","literal"]],"x":"git diff","n":"code","l":" 命令。\n此命令可以查看你工作环境与你的暂存区的差异（"},{"a":[["class","literal"]],"x":"git diff","n":"code","l":" 默认的做法），你暂存区域与你最后提交之间的差异（"},{"a":[["class","literal"]],"x":"git diff --staged","n":"code","l":"），或者比较两个提交记录的差异（"},{"a":[["class","literal"]],"x":"git diff master branchB","n":"code","l":"）。"},{"a":[["id","_git_status"]],"x":"git status","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"首先，我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch02-git-basics--r_checking_status"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_checking_status\"}"]],"x":"检查当前文件状态","n":"a","l":" 一节中介绍了 "},{"a":[["class","literal"]],"x":"status","n":"code","l":" 的基本及简单的形式。\n虽然我们在全书中都有用到它，但是绝大部分的你能用 "},{"a":[["class","literal"]],"x":"git status","n":"code","l":" 做的事情都在这一章讲到了。"},{"a":[["class","literal"]],"x":"git status","n":"code","l":" 命令将为你展示工作区及暂存区域中不同状态的文件。\n这其中包含了已修改但未暂存，或已经暂存但没有提交的文件。\n一般在它显示形式中，会给你展示一些关于如何在这些暂存区域之间移动文件的提示。"},{"a":[["id","_git_add"]],"x":"git add","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"这个命令对于 Git 来说特别的重要，所以在本书中被无数次的提及和使用。\n我们将快速的过一遍一些可以看到的独特的用法。","n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"x":"然后，我们在 ","n":"p","l":"\n"},{"x":"接下来，我们在 ","n":"p","l":"\n"},{"x":"最后，在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_tree_objects"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_tree_objects\"}"]],"x":"树对象","n":"a","l":" 一节中我们在一个低层次中模拟了它的用法，以便你可以了解在这背后发生了什么。"},{"a":[["id","xref--ch07-git-tools--r_interactive_staging"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_interactive_staging\"}"]],"x":"交互式暂存","n":"a","l":" 一章中使用它来交互式的暂存一个已修改文件的特定部分。"},{"a":[["id","xref--ch03-git-branching--r_basic_merge_conflicts"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_basic_merge_conflicts\"}"]],"x":"遇到冲突时的分支合并","n":"a","l":" 一节中提到了如何使用它来解决合并冲突。"},{"a":[["id","xref--ch02-git-basics--r_tracking_files"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_tracking_files\"}"]],"x":"跟踪新文件","n":"a","l":" 一节中介绍并详细解释了 "},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 命令。"},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 命令将内容从工作目录添加到暂存区（或称为索引（index）区），以备下次提交。\n当 "},{"a":[["class","literal"]],"x":"git commit","n":"code","l":" 命令执行时，默认情况下它只会检查暂存区域，因此 "},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 是用来确定下一次提交时快照的样子的。"},{"a":[["id","_获取与创建项目"]],"x":"获取与创建项目","n":"h2","l":"\n"},{"x":"有几种方式获取一个 Git 仓库。\n一种是从网络上或者其他地方拷贝一个现有的仓库，另一种就是在一个目录中创建一个新的仓库。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git init"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git clone"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_clone"]],"x":"git clone","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，在 ","n":"p","l":"\n"},{"x":"虽然在本书的其他地方都有用到此命令，但是上面这些用法是特例，或者使用方式有点特别。","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_cloning_submodules"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_cloning_submodules\"}"]],"x":"克隆含有子模块的项目","n":"a","l":" 一节中我们学习了使用 "},{"a":[["class","literal"]],"x":"--recursive","n":"code","l":" 选项来让克隆一个带有子模块的仓库变得简单。"},{"a":[["id","xref--ch07-git-tools--r_bundling"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_bundling\"}"]],"x":"打包","n":"a","l":" 一节中我们使用它来解包一个打包好的 Git 仓库。"},{"a":[["id","xref--ch04-git-server--r_git_on_the_server"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch04-git-server.xhtml\", \"frag\": \"r_git_on_the_server\"}"]],"x":"在服务器上搭建 Git","n":"a","l":" 一节中，我们使用了 "},{"a":[["class","literal"]],"x":"--bare","n":"code","l":" 选项来创建一个没有任何工作目录的 Git 仓库副本。"},{"a":[["id","xref--ch02-git-basics--r_git_cloning"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_git_cloning\"}"]],"x":"克隆现有的仓库","n":"a","l":" 一节中我们通过几个示例详细介绍了此命令。"},{"a":[["class","literal"]],"x":"git clone","n":"code","l":" 命令在本书中多次用到，这里只列举几个有意思的地方。"},{"a":[["class","literal"]],"x":"git clone","n":"code","l":" 实际上是一个封装了其他几个命令的命令。\n它创建了一个新目录，切换到新的目录，然后 "},{"a":[["class","literal"]],"x":"git init","n":"code","l":" 来初始化一个空的 Git 仓库， 然后为你指定的 URL 添加一个（默认名称为 "},{"a":[["class","literal"]],"x":"origin","n":"code","l":" 的）远程仓库（"},{"a":[["class","literal"]],"x":"git remote add","n":"code","l":"），再针对远程仓库执行 "},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":"，最后通过 "},{"a":[["class","literal"]],"x":"git checkout","n":"code","l":" 将远程仓库的最新提交检出到本地的工作目录。"},{"a":[["id","_git_init"]],"x":"git init","n":"h3","l":"\n"},{"x":"你只需要简单地运行 ","n":"p","l":"\n"},{"x":"我们一开始在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch10-git-internals--r_plumbing_porcelain"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"r_plumbing_porcelain\"}"]],"x":"底层命令和高层命令","n":"a","l":" 一节中介绍了此命令背后工作的原理的一些细节。"},{"a":[["id","xref--ch04-git-server--r_bare_repo"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch04-git-server.xhtml\", \"frag\": \"r_bare_repo\"}"]],"x":"把裸仓库放到服务器上","n":"a","l":" 一节中我们使用此命令来为一个服务器创建一个空的祼仓库。"},{"a":[["id","xref--ch03-git-branching--r_remote_branches"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_remote_branches\"}"]],"x":"远程分支","n":"a","l":" 一节中我们简单的讨论了如何改变默认分支。"},{"a":[["id","xref--ch02-git-basics--r_getting_a_repo"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_getting_a_repo\"}"]],"x":"获取 Git 仓库","n":"a","l":" 一节中介绍了如何创建一个新的仓库来开始工作。"},{"a":[["class","literal"]],"x":"git init","n":"code","l":" 就可以将一个目录转变成一个 Git 仓库，这样你就可以开始对它进行版本管理了。"},{"a":[["id","_设置与配置"]],"x":"设置与配置","n":"h2","l":"\n"},{"x":"有两个命令使用得最多了，从第一次调用 Git 到每天的日常微调及参考，这个两个命令就是： ","n":"p","l":"\n"},{"a":[["class","sect2"],["title","git config"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","git help"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_git_help"]],"x":"git help","n":"h3","l":"\n"},{"n":"p","l":"\n"},{"x":"我们在 ","n":"p","l":"\n"},{"a":[["id","xref--ch01-introduction--r_git_help"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch01-introduction.xhtml\", \"frag\": \"r_git_help\"}"]],"x":"获取帮助","n":"a","l":" 一节中介绍了 "},{"a":[["class","literal"]],"x":"git help","n":"code","l":" 命令，同时在 "},{"a":[["id","xref--ch04-git-server--r_setting_up_server"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch04-git-server.xhtml\", \"frag\": \"r_setting_up_server\"}"]],"x":"配置服务器","n":"a","l":" 一节中给你展示了如何使用它来查找更多关于 "},{"a":[["class","literal"]],"x":"git shell","n":"code","l":" 的信息。"},{"a":[["class","literal"]],"x":"git help","n":"code","l":" 命令用来显示任何命令的 Git 自带文档。\n但是我们仅会在此附录中提到大部分最常用的命令，对于每一个命令的完整的可选项及标志列表，你可以随时运行 "},{"a":[["class","literal"]],"x":"git help <command>","n":"code","l":" 命令来了解。"},{"a":[["id","_git_config"]],"x":"git config","n":"h3","l":"\n"},{"x":"Git 做的很多工作都有一个默认方式。\n对于绝大多数工作而言，你可以改变 Git 的默认方式，或者根据你的偏好来设置。\n这些设置涵盖了所有的事，从告诉 Git 你的名字，到指定偏好的终端颜色，以及你使用的编辑器。\n此命令会从几个特定的配置文件中读取和写入配置值，以便你可以从全局或者针对特定的仓库来进行设置。","n":"p","l":"\n"},{"x":"本书的所有章节几乎都有用到 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"在 ","n":"p","l":"\n"},{"x":"最后，基本上 ","n":"p","l":"\n"},{"a":[["id","xref--ch08-customizing-git--r_git_config"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"r_git_config\"}"]],"x":"配置 Git","n":"a","l":" 整个章节都是针对此命令的。"},{"a":[["id","xref--ch08-customizing-git--r_keyword_expansion"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch08-customizing-git.xhtml\", \"frag\": \"r_keyword_expansion\"}"]],"x":"关键字展开","n":"a","l":" 一节中我们展示了如何设置在 Git 的内容添加和减少时使用的 smudge 过滤器 和 clean 过滤器。"},{"a":[["id","xref--ch07-git-tools--r_credential_caching"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_credential_caching\"}"]],"x":"凭证存储","n":"a","l":" 一节中，我们使用它来为你的 HTTP 密码设置一个默认的存储区域。"},{"a":[["id","xref--ch03-git-branching--r_rebasing"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_rebasing\"}"]],"x":"变基","n":"a","l":" 一节中，执行 "},{"a":[["class","literal"]],"x":"git pull","n":"code","l":" 命令时，使用此命令来将 "},{"a":[["class","literal"]],"x":"--rebase","n":"code","l":" 作为默认选项。"},{"a":[["id","xref--ch02-git-basics--r_git_aliases"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"r_git_aliases\"}"]],"x":"Git 别名","n":"a","l":" 一节中我们展示了如何创建可以展开为长选项序列的短命令，以便你不用每次都输入它们。"},{"a":[["id","xref--ch01-introduction--r_first_time"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch01-introduction.xhtml\", \"frag\": \"r_first_time\"}"]],"x":"初次运行 Git 前的配置","n":"a","l":" 一节中，在开始使用 Git 之前，我们用它来指定我们的名字，邮箱地址和编辑器偏好。"},{"a":[["class","literal"]],"x":"git config","n":"code","l":" 命令。"},{"a":[["class","literal"]],"x":"config","n":"code","l":" 和  "},{"a":[["class","literal"]],"x":"help","n":"code","l":" 命令。"},{"a":[["class","chapter-header"]],"x":"\n","n":"div","l":"\n"},{"a":[["class","chapter-title"]],"n":"h1","l":"\n"},{"a":[["class","subtitle"]],"n":"small"},{"x":"Git","n":"b","l":" "},{"x":"命令","n":"b"},{"x":"Git 命令","n":"title","l":"\n"},{"a":[["rel","stylesheet"],["type","text/css"],["href","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvc3R5bGVzL2VwdWIzLmNzcw==|"]],"n":"link","l":"\n"},{"a":[["rel","stylesheet"],["type","text/css"],["href","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvc3R5bGVzL2VwdWIzLWNzczMtb25seS5jc3M=|"],["media","(min-device-width: 0px)"]],"n":"link","l":"\n"},{"a":[["type","text/javascript"]],"x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","n":"script","l":"\n"}]}