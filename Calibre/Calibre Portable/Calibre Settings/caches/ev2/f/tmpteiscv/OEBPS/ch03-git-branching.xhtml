{"ns_map":["http://www.w3.org/1999/xhtml","http://www.w3.org/XML/1998/namespace"],"tree":[0,[1,[1006],[1007],[1008],[1009]],[2,[3,[4,[1001,[1002,[1003,[1004],[1005]]]]],[5],[6],[7,[850],[851],[852,[1000]],[853],[854,[999]],[855,[993,[994,[995],[996],[997],[998]]]],[856,[992]],[857],[858,[989,[991]],[990]],[859],[860,[986,[988]],[987]],[861,[984],[985]],[862,[981,[982,[983]]]],[863,[978,[980]],[979]],[864,[944],[945,[977]],[946,[973,[974,[975],[976]]]],[947],[948,[970,[972]],[971]],[949,[964],[965],[966],[967],[968],[969]],[950,[961,[963]],[962]],[951,[959],[960]],[952,[955,[956,[957],[958]]]],[953,[954]]],[865,[866],[867,[942],[943]],[868,[938,[939,[940],[941]]]],[869,[936],[937]],[870,[933,[935]],[934]],[871],[872,[927,[928,[929],[930],[931],[932]]]],[873,[924,[926]],[925]],[874,[920],[921],[922],[923]],[875,[916,[917,[918],[919]]]],[876,[913,[915]],[914]],[877,[910],[911],[912]],[878,[907],[908,[909]]],[879],[880,[901,[902,[903],[904],[905],[906]]]],[881,[897],[898],[899],[900]],[882,[894,[896]],[895]],[883,[892],[893]],[884,[888,[889,[890],[891]]]],[885],[886],[887]]],[8,[581],[582],[583,[843,[844,[849]],[845,[848]],[846,[847]]]],[584],[585,[834,[835,[842]],[836,[841]],[837,[840]],[838,[839]]]],[586,[715],[716],[717,[831,[833]],[832]],[718,[829],[830]],[719,[825,[826,[827],[828]]]],[720],[721,[820,[821,[822],[823],[824]]]],[722,[817,[819]],[818]],[723,[814],[815],[816]],[724,[808,[809,[810],[811],[812],[813]]]],[725,[805,[807]],[806]],[726,[803],[804]],[727,[801],[802]],[728,[797,[798,[799],[800]]]],[729],[730],[731,[790,[791,[792],[793],[794],[795],[796]]]],[732,[785,[789]],[786,[787],[788]]],[733,[783],[784]],[734,[778,[779,[780],[781],[782]]]],[735,[777]],[736,[776]],[737,[771,[775]],[772,[773],[774]]],[738,[767],[768],[769],[770]],[739,[763,[764,[765],[766]]]],[740],[741,[756,[757,[758],[759],[760],[761],[762]]]],[742,[752,[755]],[753,[754]]],[743,[744],[745],[746],[747],[748],[749],[750],[751]]],[587,[678],[679,[710],[711],[712],[713],[714]],[680,[705,[706,[707],[708],[709]]]],[681,[699],[700],[701],[702],[703],[704]],[682,[696,[698]],[697]],[683],[684,[693,[695]],[694]],[685],[686,[692]],[687,[688,[689,[690],[691]]]]],[588,[589],[590,[677]],[591,[673,[674,[675],[676]]]],[592,[672]],[593,[668,[669,[670],[671]]]],[594],[595,[657,[658,[659],[660],[661],[662],[663],[664],[665],[666],[667]]]],[596,[651],[652],[653],[654],[655],[656]],[597,[645,[646,[647],[648],[649],[650]]]],[598,[641],[642],[643],[644]],[599,[640]],[600,[636,[637,[638],[639]]]],[601,[635]],[602,[632,[633,[634]]]],[603,[631]],[604,[627,[628,[629],[630]]]],[605,[626]],[606,[608,[609,[610],[611],[612],[613],[614],[615],[616],[617],[618],[619],[620],[621],[622],[623],[624],[625]]]],[607]]],[9,[532],[533],[534,[580]],[535,[576,[577,[578],[579]]]],[536,[571],[572],[573],[574],[575]],[537,[567,[568,[569],[570]]]],[538,[564],[565],[566]],[539,[560,[561,[562],[563]]]],[540,[557],[558],[559]],[541,[556]],[542,[552,[553,[554],[555]]]],[543,[551]],[544,[547,[548,[549],[550]]]],[545,[546]]],[10,[468],[469],[470,[509],[510],[511,[527],[528],[529],[530],[531]],[512],[513,[524,[526]],[525]],[514],[515,[521,[523]],[522]],[516,[517],[518],[519],[520]]],[471,[472],[473,[508]],[474,[504],[505],[506],[507]],[475,[495],[496],[497],[498],[499],[500],[501],[502],[503]],[476,[492,[494]],[493]],[477,[487],[488],[489],[490],[491]],[478,[482,[486]],[483,[484],[485]]],[479,[481]],[480]]],[11,[257],[258,[466],[467]],[259],[260,[459],[460],[461],[462],[463],[464],[465]],[261,[452],[453],[454],[455],[456],[457],[458]],[262,[445],[446,[447,[448],[449],[450],[451]]]],[263,[442,[444]],[443]],[264,[438],[439],[440],[441]],[265,[435,[437]],[436]],[266,[432],[433],[434]],[267,[428,[431]],[429,[430]]],[268,[424],[425],[426],[427]],[269,[421,[423]],[422]],[270,[415],[416],[417],[418],[419],[420]],[271,[411,[414]],[412,[413]]],[272,[362],[363],[364,[409],[410]],[365,[405,[406,[407],[408]]]],[366,[396],[397],[398],[399],[400],[401],[402],[403],[404]],[367,[389],[390,[391],[392,[395]],[393,[394]]]],[368,[387],[388]],[369,[383,[384,[385],[386]]]],[370,[381],[382]],[371,[379],[380]],[372,[375,[376,[377],[378]]]],[373,[374]]],[273,[301],[302,[361]],[303,[356],[357],[358],[359],[360]],[304,[352,[353,[354],[355]]]],[305],[306,[348,[349,[350],[351]]]],[307,[346],[347]],[308,[343],[344],[345]],[309,[339,[340,[341],[342]]]],[310,[330],[331,[332,[333],[334],[335],[336],[337],[338]]]],[311,[328],[329]],[312,[324,[325,[326],[327]]]],[313,[316],[317],[318],[319],[320],[321],[322],[323]],[314,[315]]],[274,[288],[289,[294],[295],[296],[297],[298],[299],[300]],[290,[291],[292],[293]]],[275,[276],[277,[284],[285],[286],[287]],[278,[280,[281,[282],[283]]]],[279]]],[12,[16],[17,[255],[256]],[18,[197],[198,[254]],[199,[251,[253]],[252]],[200,[247],[248],[249],[250]],[201,[244,[246]],[245]],[202,[240],[241],[242],[243]],[203],[204,[235,[236,[237],[238],[239]]]],[205,[231],[232],[233],[234]],[206,[226,[230]],[227,[228],[229]]],[207,[225]],[208,[220,[221,[222],[223],[224]]]],[209,[217,[219]],[218]],[210,[214],[215],[216]],[211,[213]],[212]],[19,[104],[105,[187],[188],[189],[190],[191],[192],[193],[194],[195],[196]],[106,[184,[186]],[185]],[107,[175],[176],[177],[178],[179],[180],[181],[182],[183]],[108,[171,[172,[173],[174]]]],[109,[167],[168],[169],[170]],[110,[164,[166]],[165]],[111,[162],[163]],[112,[157,[158,[159],[160],[161]]]],[113,[154,[156]],[155]],[114,[149],[150],[151],[152],[153]],[115,[145,[146,[147],[148]]]],[116,[142],[143],[144]],[117,[139,[141]],[140]],[118],[119,[134,[135,[136],[137],[138]]]],[120,[131],[132],[133]],[121,[126,[127,[128],[129],[130]]]],[122,[123,[125]],[124]]],[20,[71],[72],[73,[103]],[74],[75,[102]],[76],[77,[99,[101]],[100]],[78],[79,[96,[98]],[97]],[80,[95]],[81,[92,[94]],[93]],[82,[91]],[83,[88,[90]],[89]],[84,[85],[86],[87]]],[21,[31],[32,[70]],[33],[34],[35,[68],[69]],[36,[58,[59,[67]],[60,[66]],[61,[65]],[62,[63,[64]]]]],[37,[56],[57]],[38,[53,[55]],[54]],[39],[40,[49],[50],[51],[52]],[41,[45],[46],[47],[48]],[42],[43,[44]]],[22,[23],[24],[25,[30]],[26,[29]],[27],[28]]],[13,[14],[15]]]]],"tag_map":[{"a":[["lang","en",1],["lang","en"]],"n":"html"},{"x":"\n\n","n":"head","l":"\n"},{"x":"\n","n":"body","l":"\n"},{"a":[["class","chapter"],["title","Git 分支"],["role","doc-chapter"],["id","ch03-git-branching"]],"x":"\n","n":"section","l":"\n"},{"x":"\n","n":"header","l":"\n"},{"x":"\n几乎所有的版本控制系统都以某种形式支持分支。\n使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。\n在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。","n":"p","l":"\n"},{"x":"有人把 Git 的分支模型称为它的`‘必杀技特性’'，也正因为这一特性，使得 Git 从众多版本控制系统中脱颖而出。\n为何 Git 的分支模型如此出众呢？\nGit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。\n与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式。","n":"p","l":"\n"},{"a":[["class","sect1"],["title","分支简介"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","分支的新建与合并"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","分支管理"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","分支开发工作流"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","远程分支"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","变基"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect1"],["title","总结"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_总结"]],"x":"总结","n":"h2","l":"\n"},{"x":"我们已经讲完了 Git 分支与合并的基础知识。\n你现在应该能自如地创建并切换至新分支、在不同分支之间切换以及合并本地分支。\n你现在应该也能通过推送你的分支至共享服务以分享它们、使用共享分支与他人协作以及在共享之前使用变基操作合并你的分支。\n下一章，我们将要讲到，如果你想要运行自己的 Git 仓库托管服务器，你需要知道些什么。","n":"p","l":"\n"},{"a":[["id","r_rebasing"]],"x":"变基","n":"h2","l":"\n"},{"x":"\n在 Git 中整合来自不同分支的修改主要有两种方法：","n":"p","l":"\n"},{"a":[["class","sect2"],["title","变基的基本操作"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","更有趣的变基例子"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","变基的风险"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","用变基解决变基"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","变基 vs. 合并"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","_变基_vs_合并"]],"x":"变基 vs. 合并","n":"h3","l":"\n"},{"x":"\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。\n在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。","n":"p","l":"\n"},{"x":"有一种观点认为，仓库的提交历史即是 ","n":"p","l":"\n"},{"x":"另一种观点则正好相反，他们认为提交历史是 ","n":"p","l":"\n"},{"x":"现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。\nGit 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。\n既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。","n":"p","l":"\n"},{"x":"总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。","n":"p","l":"\n"},{"x":"项目过程中发生的事","n":"strong","l":"。\n没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。\n持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。"},{"x":"记录实际发生过什么","n":"strong","l":"。\n它是针对历史的文档，本身就有价值，不能乱改。\n从这个角度看来，改变提交历史是一种亵渎，你使用_谎言_掩盖了实际发生过的事情。\n如果由合并产生的提交历史是一团糟怎么办？\n既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。"},{"a":[["id","r_rebase_rebase"]],"x":"用变基解决变基","n":"h3","l":"\n"},{"x":"如果你 ","n":"p","l":"\n"},{"x":"实际上，Git 除了对整个提交计算 SHA-1 校验和以外，也对本次提交所引入的修改计算了校验和——\n即 “patch-id”。","n":"p","l":"\n"},{"x":"如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 Git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。","n":"p","l":"\n"},{"x":"举个例子，如果遇到前面提到的 ","n":"p","l":"\n"},{"a":[["class","itemized-list"]],"x":"\n","n":"div","l":"\n"},{"x":"从而我们将得到与 ","n":"p","l":"\n"},{"a":[["id","r_rebase_rebase_work"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"要想上述方案有效，还需要对方在变基时确保 C4' 和 C4 是几乎一样的。\n否则变基操作将无法识别，并新建另一个类似 C4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。","n":"p","l":"\n"},{"x":"在本例中另一种简单的方法是使用 ","n":"p","l":"\n"},{"x":"如果你习惯使用 ","n":"p","l":"\n"},{"x":"只要你把变基命令当作是在推送前清理提交使之整洁的工具，并且只在从未推送至共用仓库的提交上执行变基命令，就不会有事。\n假如在那些已经被推送至共用仓库的提交上执行变基命令，并因此丢弃了一些别人的开发所基于的提交，那你就有大麻烦了，你的同事也会因此鄙视你。","n":"p","l":"\n"},{"x":"如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git pull --rebase","n":"code","l":" 命令，这样尽管不能避免伤痛，但能有所缓解。"},{"a":[["class","literal"]],"x":"git pull","n":"code","l":" ，同时又希望默认使用选项 "},{"a":[["class","literal"]],"x":"--rebase","n":"code","l":"，你可以执行这条语句 "},{"a":[["class","literal"]],"x":"git config --global pull.rebase true","n":"code","l":" 来更改 "},{"a":[["class","literal"]],"x":"pull.rebase","n":"code","l":" 的默认配置。"},{"a":[["class","literal"]],"x":"git pull --rebase","n":"code","l":" 命令而不是直接 "},{"a":[["class","literal"]],"x":"git pull","n":"code","l":"。\n又或者你可以自己手动完成这个过程，先 "},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":"，再 "},{"a":[["class","literal"]],"x":"git rebase teamone/master","n":"code","l":"。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 40. 在一个被变基然后强制推送的分支上再次执行变基","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3Blcmlscy1vZi1yZWJhc2luZy01LnBuZw==|"],["alt","在一个被变基然后强制推送的分支上再次执行变基。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-5.png"]],"n":"img","l":"\n"},{"a":[["id","xref-r_merge_rebase_work"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_merge_rebase_work\"}"]],"x":"你将相同的内容又合并了一次，生成了一个新的提交","n":"a","l":" 中不同的结果，如图 "},{"a":[["id","xref-r_rebase_rebase_work"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_rebase_rebase_work\"}"]],"x":"在一个被变基然后强制推送的分支上再次执行变基","n":"a","l":" 所示。"},{"x":"\n","n":"ul","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"a":[["class","principal"]],"x":"把查到的这些提交应用在 ","n":"span","l":"\n"},{"a":[["class","literal"]],"x":"teamone/master","n":"code","l":" 上面"},{"a":[["class","principal"]],"x":"检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4'）","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"检查其中哪些提交不是合并操作的结果（C2，C3，C4）","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）","n":"span","l":"\n"},{"a":[["id","xref-r_pre_merge_rebase_work"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_pre_merge_rebase_work\"}"]],"x":"有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交","n":"a","l":" 那种情境，如果我们不是执行合并，而是执行 "},{"a":[["class","literal"]],"x":"git rebase teamone/master","n":"code","l":", Git 将会："},{"x":"真的","n":"strong","l":" 遭遇了类似的处境，Git 还有一些高级魔法可以帮到你。\n如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。"},{"a":[["id","r_rebase_peril"]],"x":"变基的风险","n":"h3","l":"\n"},{"x":"\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：","n":"p","l":"\n"},{"n":"p","l":"\n"},{"x":"如果你遵循这条金科玉律，就不会出差错。\n否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。","n":"p","l":"\n"},{"x":"变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。\n如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 ","n":"p","l":"\n"},{"x":"让我们来看一个在公开的仓库上执行变基操作所带来的问题。\n假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。\n你的提交历史如图所示：","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。\n你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"接下来，这个人又决定把合并操作回滚，改用变基；继而又用 ","n":"p","l":"\n"},{"a":[["id","r_pre_merge_rebase_work"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"结果就是你们两人的处境都十分尴尬。\n如果你执行 ","n":"p","l":"\n"},{"a":[["id","r_merge_rebase_work"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"此时如果你执行 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。\n此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。\n很明显对方并不想在提交历史中看到 "},{"a":[["class","literal"]],"x":"C4","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"C6","n":"code","l":"，因为之前就是他把这两个提交通过变基丢弃的。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 39. 你将相同的内容又合并了一次，生成了一个新的提交","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3Blcmlscy1vZi1yZWJhc2luZy00LnBuZw==|"],["alt","你将相同的内容又合并了一次，生成了一个新的提交。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-4.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git pull","n":"code","l":" 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 38. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3Blcmlscy1vZi1yZWJhc2luZy0zLnBuZw==|"],["alt","有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-3.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git push --force","n":"code","l":" 命令覆盖了服务器上的提交历史。\n之后你从服务器抓取更新，会发现多出来一些新的提交。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 37. 抓取别人的提交，合并到自己的开发分支","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3Blcmlscy1vZi1yZWJhc2luZy0yLnBuZw==|"],["alt","抓取别人的提交，合并到自己的开发分支。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-2.png"]],"n":"img","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 36. 克隆一个仓库，然后在它的基础上进行了一些开发","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3Blcmlscy1vZi1yZWJhc2luZy0xLnBuZw==|"],["alt","克隆一个仓库，然后在它的基础上进行了一些开发。"],["data-calibre-src","OEBPS/images/perils-of-rebasing-1.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git rebase","n":"code","l":" 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。"},{"x":"不要对在你的仓库外有副本的分支执行变基。","n":"strong"},{"a":[["id","_更有趣的变基例子"]],"x":"更有趣的变基例子","n":"h3","l":"\n"},{"x":"在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。\n就像 ","n":"p","l":"\n"},{"a":[["id","rrbdiag_e"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"假设你希望将 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"以上命令的意思是：“取出 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在可以快进合并 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["id","rrbdiag_g"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"接下来你决定将 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"如图 ","n":"p","l":"\n"},{"a":[["id","rrbdiag_h"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"然后就可以快进合并主分支 master 了：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"至此，","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["id","rrbdiag_i"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 35. 最终的提交历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2ludGVyZXN0aW5nLXJlYmFzZS01LnBuZw==|"],["alt","最终的提交历史。"],["data-calibre-src","OEBPS/images/interesting-rebase-5.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -d client\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -d server"},{"a":[["class","literal"]],"x":"client","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"server","n":"code","l":" 分支中的修改都已经整合到主分支里了，你可以删除这两个分支，最终提交历史会变成图 "},{"a":[["id","xref-rrbdiag_i"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"rrbdiag_i\"}"]],"x":"最终的提交历史","n":"a","l":" 中的样子："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout master\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git merge server"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 34. 将 server 中的修改变基到 master 上","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2ludGVyZXN0aW5nLXJlYmFzZS00LnBuZw==|"],["alt","将 server 中的修改变基到 master 上。"],["data-calibre-src","OEBPS/images/interesting-rebase-4.png"]],"n":"img","l":"\n"},{"a":[["id","xref-rrbdiag_h"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"rrbdiag_h\"}"]],"x":"将 server 中的修改变基到 master 上","n":"a","l":" 所示，"},{"a":[["class","literal"]],"x":"server","n":"code","l":" 中的代码被“续”到了 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 后面。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git rebase master server"},{"a":[["class","literal"]],"x":"server","n":"code","l":" 分支中的修改也整合进来。\n使用 "},{"a":[["class","literal"]],"x":"git rebase [basebranch] [topicbranch]","n":"code","l":" 命令可以直接将特性分支（即本例中的 "},{"a":[["class","literal"]],"x":"server","n":"code","l":"）变基到目标分支（即 "},{"a":[["class","literal"]],"x":"master","n":"code","l":"）上。这样做能省去你先切换到 "},{"a":[["class","literal"]],"x":"server","n":"code","l":" 分支，再对其执行变基命令的多个步骤。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 33. 快进合并 master 分支，使之包含来自 client 分支的修改","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2ludGVyZXN0aW5nLXJlYmFzZS0zLnBuZw==|"],["alt","快进合并 master 分支，使之包含来自 client 分支的修改。"],["data-calibre-src","OEBPS/images/interesting-rebase-3.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout master\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git merge client"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支了。（如图 "},{"a":[["id","xref-rrbdiag_g"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"rrbdiag_g\"}"]],"x":"快进合并 master 分支，使之包含来自 client 分支的修改","n":"a","l":"）："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 32. 截取特性分支上的另一个特性分支，然后变基到其他分支","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2ludGVyZXN0aW5nLXJlYmFzZS0yLnBuZw==|"],["alt","截取特性分支上的另一个特性分支，然后变基到其他分支。"],["data-calibre-src","OEBPS/images/interesting-rebase-2.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"client","n":"code","l":" 分支，找出处于 "},{"a":[["class","literal"]],"x":"client","n":"code","l":" 分支和 "},{"a":[["class","literal"]],"x":"server","n":"code","l":" 分支的共同祖先之后的修改，然后把它们在 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支上重放一遍”。\n这理解起来有一点复杂，不过效果非常酷。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git rebase --onto master server client"},{"a":[["class","literal"]],"x":"client","n":"code","l":" 中的修改合并到主分支并发布，但暂时并不想合并 "},{"a":[["class","literal"]],"x":"server","n":"code","l":" 中的修改，因为它们还需要经过更全面的测试。\n这时，你就可以使用 "},{"a":[["class","literal"]],"x":"git rebase","n":"code","l":" 命令的 "},{"a":[["class","literal"]],"x":"--onto","n":"code","l":" 选项，选中在 "},{"a":[["class","literal"]],"x":"client","n":"code","l":" 分支里但不在 "},{"a":[["class","literal"]],"x":"server","n":"code","l":" 分支里的修改（即 "},{"a":[["class","literal"]],"x":"C8","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"C9","n":"code","l":"），将它们在 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支上重放："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 31. 从一个特性分支里再分出一个特性分支的提交历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2ludGVyZXN0aW5nLXJlYmFzZS0xLnBuZw==|"],["alt","从一个特性分支里再分出一个特性分支的提交历史。"],["data-calibre-src","OEBPS/images/interesting-rebase-1.png"]],"n":"img","l":"\n"},{"a":[["id","xref-rrbdiag_e"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"rrbdiag_e\"}"]],"x":"从一个特性分支里再分出一个特性分支的提交历史","n":"a","l":" 中的例子那样。\n你创建了一个特性分支 "},{"a":[["class","literal"]],"x":"server","n":"code","l":"，为服务端添加了一些功能，提交了 "},{"a":[["class","literal"]],"x":"C3","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"C4","n":"code","l":"。\n然后从 "},{"a":[["class","literal"]],"x":"C3","n":"code","l":" 上创建了特性分支 "},{"a":[["class","literal"]],"x":"client","n":"code","l":"，为客户端添加了一些功能，提交了 "},{"a":[["class","literal"]],"x":"C8","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"C9","n":"code","l":"。\n最后，你回到 "},{"a":[["class","literal"]],"x":"server","n":"code","l":" 分支，又提交了 "},{"a":[["class","literal"]],"x":"C10","n":"code","l":"。"},{"a":[["id","_变基的基本操作"]],"x":"变基的基本操作","n":"h3","l":"\n"},{"x":"请回顾之前在 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"之前介绍过，整合分支最容易的方法是 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"其实，还有一种方法：你可以提取在 ","n":"p","l":"\n"},{"x":"在上面这个例子中，运行：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"它的原理是首先找到这两个分支（即当前分支 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在回到 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"此时，","n":"p","l":"\n"},{"x":"一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。\n在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 ","n":"p","l":"\n"},{"x":"请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。\n变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":" 上，然后再向主项目提交修改。\n这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。"},{"a":[["class","literal"]],"x":"C4'","n":"code","l":" 指向的快照就和上面使用 "},{"a":[["class","literal"]],"x":"merge","n":"code","l":" 命令的例子中 "},{"a":[["class","literal"]],"x":"C5","n":"code","l":" 指向的快照一模一样了。\n这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。\n你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 30. master 分支的快进合并","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLXJlYmFzZS00LnBuZw==|"],["alt","master 分支的快进合并。"],["data-calibre-src","OEBPS/images/basic-rebase-4.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout master\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git merge experiment"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支，进行一次快进合并。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 29. 将 ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"C4","n":"code","l":" 中的修改变基到 "},{"a":[["class","literal"]],"x":"C3","n":"code","l":" 上"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLXJlYmFzZS0zLnBuZw==|"],["alt","将 `C4` 中的修改变基到 `C3` 上。"],["data-calibre-src","OEBPS/images/basic-rebase-3.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"experiment","n":"code","l":"、变基操作的目标基底分支 "},{"a":[["class","literal"]],"x":"master","n":"code","l":"）的最近共同祖先 "},{"a":[["class","literal"]],"x":"C2","n":"code","l":"，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 "},{"a":[["class","literal"]],"x":"C3","n":"code","l":", 最后以此将之前另存为临时文件的修改依序应用。（译注：写明了 commit id，以便理解，下同）"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout experiment\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command"},{"a":[["class","literal"]],"x":"C4","n":"code","l":" 中引入的补丁和修改，然后在 "},{"a":[["class","literal"]],"x":"C3","n":"code","l":" 的基础上应用一次。\n在 Git 中，这种操作就叫做 "},{"x":"变基","n":"em","l":"。\n你可以使用 "},{"a":[["class","literal"]],"x":"rebase","n":"code","l":" 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 28. 通过合并操作来整合分叉了的历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLXJlYmFzZS0yLnBuZw==|"],["alt","通过合并操作来整合分叉了的历史。"],["data-calibre-src","OEBPS/images/basic-rebase-2.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"merge","n":"code","l":" 命令。\n它会把两个分支的最新快照（"},{"a":[["class","literal"]],"x":"C3","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"C4","n":"code","l":"）以及二者最近的共同祖先（"},{"a":[["class","literal"]],"x":"C2","n":"code","l":"）进行三方合并，合并的结果是生成一个新的快照（并提交）。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 27. 分叉的提交历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLXJlYmFzZS0xLnBuZw==|"],["alt","分叉的提交历史。"],["data-calibre-src","OEBPS/images/basic-rebase-1.png"]],"n":"img","l":"\n"},{"a":[["id","xref-r_basic_merging"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"r_basic_merging\"}"]],"x":"分支的合并","n":"a","l":" 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。"},{"a":[["class","literal"]],"x":"merge","n":"code","l":" 以及 "},{"a":[["class","literal"]],"x":"rebase","n":"code","l":"。\n在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。"},{"a":[["id","r_remote_branches"]],"x":"远程分支","n":"h2","l":"\n"},{"x":"\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n你可以通过 ","n":"p","l":"\n"},{"x":"远程跟踪分支是远程分支状态的引用。\n它们是你不能移动的本地引用，当你做任何网络通信操作时，它们会自动移动。\n远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。","n":"p","l":"\n"},{"x":"它们以 ","n":"p","l":"\n"},{"x":"这可能有一点儿难以理解，让我们来看一个例子。\n假设你的网络里有一个在 ","n":"p","l":"\n"},{"a":[["class","admonition note"],["title","Note: “origin” 并无特殊含义"]],"x":"\n","n":"aside","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果你在本地的 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果要同步你的工作，运行 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅用于你的 sprint 小组的开发工作。\n这个服务器位于 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在，可以运行 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","sect2"],["title","推送"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","跟踪分支"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","拉取"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","删除远程分支"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","r_delete_branches"]],"x":"删除远程分支","n":"h3","l":"\n"},{"x":"\n假设你已经通过远程分支做完所有的工作了 - 也就是说你和你的协作者已经完成了一个特性并且将其合并到了远程仓库的 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"基本上这个命令做的只是从服务器上移除这个指针。\nGit 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。","n":"p","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支（或任何其他稳定代码分支）。\n可以运行带有 "},{"a":[["class","literal"]],"x":"--delete","n":"code","l":" 选项的 "},{"a":[["class","literal"]],"x":"git push","n":"code","l":" 命令来删除一个远程分支。\n如果想要从服务器上删除 "},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 分支，运行下面的命令："},{"a":[["id","_拉取"]],"x":"拉取","n":"h3","l":"\n"},{"x":"\n当 ","n":"p","l":"\n"},{"x":"由于 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git pull","n":"code","l":" 的魔法经常令人困惑所以通常单独显式地使用 "},{"a":[["class","literal"]],"x":"fetch","n":"code","l":" 与 "},{"a":[["class","literal"]],"x":"merge","n":"code","l":" 命令会更好一些。"},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":" 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。\n它只会获取数据然后让你自己合并。\n然而，有一个命令叫作 "},{"a":[["class","literal"]],"x":"git pull","n":"code","l":" 在大多数情况下它的含义是一个 "},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":" 紧接着一个 "},{"a":[["class","literal"]],"x":"git merge","n":"code","l":" 命令。\n如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 "},{"a":[["class","literal"]],"x":"clone","n":"code","l":" 或 "},{"a":[["class","literal"]],"x":"checkout","n":"code","l":" 命令为你创建的，"},{"a":[["class","literal"]],"x":"git pull","n":"code","l":" 都会查找当前分支所跟踪的服务器与分支，从服务器上抓取数据然后尝试合并入那个远程分支。"},{"a":[["id","r_tracking_branches"]],"x":"跟踪分支","n":"h3","l":"\n"},{"x":"\n从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。\n跟踪分支是与远程分支有直接关系的本地分支。\n如果在一个跟踪分支上输入 ","n":"p","l":"\n"},{"x":"当克隆一个仓库时，它通常会自动地创建一个跟踪 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果想要将本地分支与远程分支设置为不同名字，你可以轻松地增加一个不同名字的本地分支的上一个命令：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在，本地分支 ","n":"p","l":"\n"},{"x":"设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","admonition note"],["title","Note: 上游快捷方式"]],"x":"\n","n":"aside","l":"\n"},{"x":"如果想要查看设置的所有跟踪分支，可以使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这里可以看到 ","n":"p","l":"\n"},{"x":"需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。\n这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。\n如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。\n可以像这样做：","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"$ git fetch --all; git branch -vv","n":"code"},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支正在跟踪 "},{"a":[["class","literal"]],"x":"origin/iss53","n":"code","l":" 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。\n也能看到 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支正在跟踪 "},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":" 分支并且是最新的。\n接下来可以看到 "},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 分支正在跟踪 "},{"a":[["class","literal"]],"x":"teamone","n":"code","l":" 服务器上的 "},{"a":[["class","literal"]],"x":"server-fix-good","n":"code","l":" 分支并且领先 3 落后 1，意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。\n最后看到 "},{"a":[["class","literal"]],"x":"testing","n":"code","l":" 分支并没有跟踪任何远程分支。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new"},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 的 "},{"a":[["class","literal"]],"x":"-vv","n":"code","l":" 选项。\n这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。"},{"x":"上游快捷方式","n":"h2","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"当设置好跟踪分支后，可以通过 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"@{upstream}","n":"code","l":" 或 "},{"a":[["class","literal"]],"x":"@{u}","n":"code","l":" 快捷方式来引用它。\n所以在 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支时并且它正在跟踪 "},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":" 时，如果愿意的话可以使用 "},{"a":[["class","literal"]],"x":"git merge @{u}","n":"code","l":" 来取代 "},{"a":[["class","literal"]],"x":"git merge origin/master","n":"code","l":"。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin."},{"a":[["class","literal"]],"x":"-u","n":"code","l":" 或 "},{"a":[["class","literal"]],"x":"--set-upstream-to","n":"code","l":" 选项运行 "},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 来显式地设置。"},{"a":[["class","literal"]],"x":"sf","n":"code","l":" 会自动从 "},{"a":[["class","literal"]],"x":"origin/serverfix","n":"code","l":" 拉取。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'"},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":" 的 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。\n然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。\n最简单的就是之前看到的例子，运行 "},{"a":[["class","literal"]],"x":"git checkout -b [branch] [remotename]/[branch]","n":"code","l":"。\n这是一个十分常用的操作所以 Git 提供了 "},{"a":[["class","literal"]],"x":"--track","n":"code","l":" 快捷方式："},{"a":[["class","literal"]],"x":"git pull","n":"code","l":"，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。"},{"a":[["id","r_pushing_branches"]],"x":"推送","n":"h3","l":"\n"},{"x":"\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。\n本地的分支并不会自动与远程仓库同步 - 你必须显式地推送想要分享的分支。\n这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。","n":"p","l":"\n"},{"x":"如果希望和别人一起在名为 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这里有些工作被简化了。\nGit 自动将 ","n":"p","l":"\n"},{"a":[["class","admonition note"],["title","Note: 如何避免每次输入密码"]],"x":"\n","n":"aside","l":"\n"},{"x":"下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。\n换一句话说，这种情况下，不会有一个新的 ","n":"p","l":"\n"},{"x":"可以运行 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这会给你一个用于工作的本地分支，并且起点位于 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"origin/serverfix","n":"code","l":"。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'"},{"a":[["class","literal"]],"x":"git merge origin/serverfix","n":"code","l":" 将这些工作合并到当前所在的分支。\n如果想要在自己的 "},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 分支上工作，可以将其建立在远程跟踪分支之上："},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 分支 - 只有一个不可以修改的 "},{"a":[["class","literal"]],"x":"origin/serverfix","n":"code","l":" 指针。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix"},{"a":[["class","literal"]],"x":"origin/serverfix","n":"code","l":"，指向服务器的 "},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 分支的引用："},{"x":"如何避免每次输入密码","n":"h2","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。\n默认情况下它会在终端中提示服务器是否允许你进行推送。","n":"p","l":"\n"},{"x":"如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。\n最简单的方式就是将其保存在内存中几分钟，可以简单地运行 ","n":"p","l":"\n"},{"x":"想要了解更多关于不同验证缓存的可用选项，查看 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_credential_caching"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_credential_caching\"}"]],"x":"凭证存储","n":"a","l":"。"},{"a":[["class","literal"]],"x":"git config --global credential.helper cache","n":"code","l":" 来设置它。"},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 分支名字展开为 "},{"a":[["class","literal"]],"x":"refs/heads/serverfix:refs/heads/serverfix","n":"code","l":"，那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。”\n我们将会详细学习 "},{"a":[["id","xref--ch10-git-internals"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch10-git-internals.xhtml\", \"frag\": \"\"}"]],"x":"Git 内部原理","n":"a","l":" 的 "},{"a":[["class","literal"]],"x":"refs/heads/","n":"code","l":" 部分，但是现在可以先把它放在儿。\n你也可以运行 "},{"a":[["class","literal"]],"x":"git push origin serverfix:serverfix","n":"code","l":"，它会做同样的事 - 相当于它说，“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支”\n可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n如果并不想让远程仓库上的分支叫做 "},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":"，可以运行 "},{"a":[["class","literal"]],"x":"git push origin serverfix:awesomebranch","n":"code","l":" 来将本地的 "},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 分支推送到远程仓库上的 "},{"a":[["class","literal"]],"x":"awesomebranch","n":"code","l":" 分支。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix"},{"a":[["class","literal"]],"x":"serverfix","n":"code","l":" 的分支上工作，你可以像推送第一个分支那样推送它。\n运行 "},{"a":[["class","literal"]],"x":"git push (remote) (branch)","n":"code","l":":"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 26. 远程跟踪分支 ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"teamone/master","n":"code"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3JlbW90ZS1icmFuY2hlcy01LnBuZw==|"],["alt","远程跟踪分支 `teamone/master`。"],["data-calibre-src","OEBPS/images/remote-branches-5.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git fetch teamone","n":"code","l":" 来抓取远程仓库 "},{"a":[["class","literal"]],"x":"teamone","n":"code","l":" 有而本地没有的数据。\n因为那台服务器上现有的数据是 "},{"a":[["class","literal"]],"x":"origin","n":"code","l":" 服务器上的一个子集，所以 Git 并不会抓取数据而是会设置远程跟踪分支 "},{"a":[["class","literal"]],"x":"teamone/master","n":"code","l":" 指向 "},{"a":[["class","literal"]],"x":"teamone","n":"code","l":" 的 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 25. 添加另一个远程仓库","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3JlbW90ZS1icmFuY2hlcy00LnBuZw==|"],["alt","添加另一个远程仓库。"],["data-calibre-src","OEBPS/images/remote-branches-4.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git.team1.ourcompany.com","n":"code","l":"。\n你可以运行 "},{"a":[["class","literal"]],"x":"git remote add","n":"code","l":" 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 "},{"a":[["id","xref--ch02-git-basics"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch02-git-basics.xhtml\", \"frag\": \"\"}"]],"x":"Git 基础","n":"a","l":" 中详细说明。\n将这个远程仓库命名为 "},{"a":[["class","literal"]],"x":"teamone","n":"code","l":"，将其作为整个 URL 的缩写。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 24. ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"git fetch","n":"code","l":" 更新你的远程仓库引用"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3JlbW90ZS1icmFuY2hlcy0zLnBuZw==|"],["alt","`git fetch` 更新你的远程仓库引用。"],["data-calibre-src","OEBPS/images/remote-branches-3.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git fetch origin","n":"code","l":" 命令。\n这个命令查找 “origin” 是哪一个服务器（在本例中，它是 "},{"a":[["class","literal"]],"x":"git.ourcompany.com","n":"code","l":"），从中抓取本地没有的数据，并且更新本地数据库，移动 "},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":" 指针指向新的、更新后的位置。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 23. 本地与远程的工作可以分叉","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3JlbW90ZS1icmFuY2hlcy0yLnBuZw==|"],["alt","本地与远程的工作可以分叉。"],["data-calibre-src","OEBPS/images/remote-branches-2.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支做了一些工作，然而在同一时间，其他人推送提交到 "},{"a":[["class","literal"]],"x":"git.ourcompany.com","n":"code","l":" 并更新了它的 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支，那么你的提交历史将向不同的方向前进。\n也许，只要你不与 origin 服务器连接，你的 "},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":" 指针就不会移动。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 22. 克隆之后的服务器与本地仓库","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3JlbW90ZS1icmFuY2hlcy0xLnBuZw==|"],["alt","克隆之后的服务器与本地仓库。"],["data-calibre-src","OEBPS/images/remote-branches-1.png"]],"n":"img","l":"\n"},{"x":"“origin” 并无特殊含义","n":"h2","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。\n同时 “master” 是当你运行 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git init","n":"code","l":" 时默认的起始分支名字，原因仅仅是它的广泛使用，“origin” 是当你运行 "},{"a":[["class","literal"]],"x":"git clone","n":"code","l":" 时默认的远程仓库名字。\n如果你运行 "},{"a":[["class","literal"]],"x":"git clone -o booyah","n":"code","l":"，那么你默认的远程分支名字将会是 "},{"a":[["class","literal"]],"x":"booyah/master","n":"code","l":"。"},{"a":[["class","literal"]],"x":"git.ourcompany.com","n":"code","l":" 的 Git 服务器。\n如果你从这里克隆，Git 的 "},{"a":[["class","literal"]],"x":"clone","n":"code","l":" 命令会为你自动将其命名为 "},{"a":[["class","literal"]],"x":"origin","n":"code","l":"，拉取它的所有数据，创建一个指向它的 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支的指针，并且在本地将其命名为 "},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":"。\nGit 也会给你一个与 origin 的 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支在指向同一个地方的本地 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支，这样你就有工作的基础。"},{"a":[["class","literal"]],"x":"(remote)/(branch)","n":"code","l":" 形式命名。\n例如，如果你想要看你最后一次与远程仓库 "},{"a":[["class","literal"]],"x":"origin","n":"code","l":" 通信时 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支的状态，你可以查看 "},{"a":[["class","literal"]],"x":"origin/master","n":"code","l":" 分支。\n你与同事合作解决一个问题并且他们推送了一个 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支，你可能有自己的本地 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支；但是在服务器上的分支会指向 "},{"a":[["class","literal"]],"x":"origin/iss53","n":"code","l":" 的提交。"},{"a":[["class","literal"]],"x":"git ls-remote (remote)","n":"code","l":" 来显式地获得远程引用的完整列表，或者通过 "},{"a":[["class","literal"]],"x":"git remote show (remote)","n":"code","l":" 获得远程分支的更多信息。\n然而，一个更常见的做法是利用远程跟踪分支。"},{"a":[["id","_分支开发工作流"]],"x":"分支开发工作流","n":"h2","l":"\n"},{"x":"现在你已经学会新建和合并分支，那么你可以或者应该用它来做些什么呢？\n在本节，我们会介绍一些常见的利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出这些典型的工作模式，你可以根据项目实际情况选择一种用用看。","n":"p","l":"\n"},{"a":[["class","sect2"],["title","长期分支"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","特性分支"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","r_topic_branch"]],"x":"特性分支","n":"h3","l":"\n"},{"x":"\n特性分支对任何规模的项目都适用。\n特性分支是一种短期分支，它被用来实现单一特性或其相关工作。\n也许你从来没有在其他的版本控制系统（","n":"p","l":"\n"},{"x":"你已经在上一节中你创建的 ","n":"p","l":"\n"},{"x":"考虑这样一个例子，你在 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"我们将会在 ","n":"p","l":"\n"},{"x":"请牢记，当你做这么多操作的时候，这些分支全部都存于本地。\n当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。","n":"p","l":"\n"},{"a":[["id","xref--ch05-distributed-git"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch05-distributed-git.xhtml\", \"frag\": \"\"}"]],"x":"分布式 Git","n":"a","l":" 中向你揭示更多有关分支工作流的细节，因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 21. 合并了 ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"dumbidea","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"iss91v2","n":"code","l":" 分支之后的提交历史"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3RvcGljLWJyYW5jaGVzLTIucG5n|"],["alt","合并了 `dumbidea` 和 `iss91v2` 分支之后的提交历史。"],["data-calibre-src","OEBPS/images/topic-branches-2.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"iss91v2","n":"code","l":" 分支中方案；另外，你将 "},{"a":[["class","literal"]],"x":"dumbidea","n":"code","l":" 分支拿给你的同事看过之后，结果发现这是个惊人之举。\n这时你可以抛弃 "},{"a":[["class","literal"]],"x":"iss91","n":"code","l":" 分支（即丢弃 "},{"a":[["class","literal"]],"x":"C5","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"C6","n":"code","l":" 提交），然后把另外两个分支合并入主干分支。\n最终你的提交历史看起来像下面这个样子："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 20. 拥有多个特性分支的提交历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3RvcGljLWJyYW5jaGVzLTEucG5n|"],["alt","拥有多个特性分支的提交历史。"],["data-calibre-src","OEBPS/images/topic-branches-1.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支上工作到 "},{"a":[["class","literal"]],"x":"C1","n":"code","l":"，这时为了解决一个问题而新建 "},{"a":[["class","literal"]],"x":"iss91","n":"code","l":" 分支，在 "},{"a":[["class","literal"]],"x":"iss91","n":"code","l":" 分支上工作到 "},{"a":[["class","literal"]],"x":"C4","n":"code","l":"，然而对于那个问题你又有了新的想法，于是你再新建一个 "},{"a":[["class","literal"]],"x":"iss91v2","n":"code","l":" 分支试图用另一种方法解决那个问题，接着你回到 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 "},{"a":[["class","literal"]],"x":"C10","n":"code","l":" 的时候新建一个 "},{"a":[["class","literal"]],"x":"dumbidea","n":"code","l":" 分支，并在上面做些实验。\n你的提交历史看起来像下面这个样子："},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 特性分支中看到过这种用法。\n你在上一节用到的特性分支（"},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。\n这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。\n你可以把做出的改动在特性分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。"},{"a":[["class","literal"]],"x":"VCS","n":"code","l":"）上这么做过，因为在那些版本控制系统中创建和合并分支通常很费劲。\n然而，在 Git 中一天之内多次创建、使用、合并、删除分支都很常见。"},{"a":[["id","_长期分支"]],"x":"长期分支","n":"h3","l":"\n"},{"x":"\n因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。\n也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些特性分支合并入其他分支中。","n":"p","l":"\n"},{"x":"许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 ","n":"p","l":"\n"},{"x":"事实上我们刚才讨论的，是随着你的提交而不断右移的指针。\n稳定分支的指针总是在提交历史中落后一大截，而前沿分支的指针往往比较靠前。","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"通常把他们想象成流水线（work silos）可能更好理解一点，那些经过测试考验的提交会被遴选到更加稳定的流水线上去。","n":"p","l":"\n"},{"a":[["id","rlrbranch_b"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"你可以用这种方法维护不同层次的稳定性。\n一些大型项目还有一个 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"proposed","n":"code","l":"（建议） 或 "},{"a":[["class","literal"]],"x":"pu: proposed updates","n":"code","l":"（建议更新）分支，它可能因包含一些不成熟的内容而不能进入 "},{"a":[["class","literal"]],"x":"next","n":"code","l":" 或者 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。\n这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。\n再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 19. 渐进稳定分支的流水线（“silo”）视图","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2xyLWJyYW5jaGVzLTIucG5n|"],["alt","渐进稳定分支的工作流（“silo”）视图。"],["data-calibre-src","OEBPS/images/lr-branches-2.png"]],"n":"img","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 18. 渐进稳定分支的线性图","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2xyLWJyYW5jaGVzLTEucG5n|"],["alt","渐进稳定分支的线性图。"],["data-calibre-src","OEBPS/images/lr-branches-1.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。\n他们还有一些名为 "},{"a":[["class","literal"]],"x":"develop","n":"code","l":" 或者 "},{"a":[["class","literal"]],"x":"next","n":"code","l":" 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支了。\n这样，在确保这些已完成的特性分支（短期分支，比如之前的 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。"},{"a":[["id","r_branch_management"]],"x":"分支管理","n":"h2","l":"\n"},{"x":"\n现在已经创建、合并、删除了一些分支，让我们看看一些常用的分支管理工具。","n":"p","l":"\n"},{"n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"注意 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"因为之前已经合并了 ","n":"p","l":"\n"},{"x":"查看所有包含未合并工作的分支，可以运行 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这里显示了其他分支。\n因为它包含了还未合并的工作，尝试使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"-D","n":"code","l":" 选项强制删除它。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'."},{"a":[["class","literal"]],"x":"git branch -d","n":"code","l":" 命令删除它时会失败："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch --no-merged\n  testing"},{"a":[["class","literal"]],"x":"git branch --no-merged","n":"code","l":"："},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支，所以现在看到它在列表中。\n在这个列表中分支名字前没有 "},{"a":[["class","literal"]],"x":"*","n":"code","l":" 号的分支通常可以使用 "},{"a":[["class","literal"]],"x":"git branch -d","n":"code","l":" 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch --merged\n  iss53\n* master"},{"a":[["class","literal"]],"x":"--merged","n":"code","l":" 与 "},{"a":[["class","literal"]],"x":"--no-merged","n":"code","l":" 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。\n如果要查看哪些分支已经合并到当前分支，可以运行 "},{"a":[["class","literal"]],"x":"git branch --merged","n":"code","l":"："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 add scott to the author list in the readmes"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支前的 "},{"a":[["class","literal"]],"x":"*","n":"code","l":" 字符：它代表现在检出的那一个分支（也就是说，当前 "},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 指针所指向的分支）。\n这意味着如果在这时候提交，"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支将会随着新的工作向前移动。\n如果需要查看每一个分支的最后一次提交，可以运行 "},{"a":[["class","literal"]],"x":"git branch -v","n":"code","l":" 命令："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch\n  iss53\n* master\n  testing"},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 命令不只是可以创建与删除分支。\n如果不加任何参数运行它，会得到当前所有分支的一个列表："},{"a":[["id","_分支的新建与合并"]],"x":"分支的新建与合并","n":"h2","l":"\n"},{"x":"让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。\n你将经历如下步骤：","n":"p","l":"\n"},{"a":[["class","ordered-list arabic"]],"x":"\n","n":"div","l":"\n"},{"x":"正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。\n你将按照如下方式来处理：","n":"p","l":"\n"},{"a":[["class","ordered-list arabic"]],"x":"\n","n":"div","l":"\n"},{"a":[["class","sect2"],["title","新建分支"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","分支的合并"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","遇到冲突时的分支合并"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","r_basic_merge_conflicts"]],"x":"遇到冲突时的分支合并","n":"h3","l":"\n"},{"x":"\n有时候合并操作不会如此顺利。\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。\n如果你对 #53 问题的修改和有关 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"此时 Git 做了合并，但是没有自动地创建一个新的合并提交。\nGit 会暂停下来，等待你去解决合并产生的冲突。\n你可以在合并冲突后的任意时刻使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。\nGit 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。\n出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这表示 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"上述的冲突解决方案仅保留了其中一个分支的修改，并且 ","n":"p","l":"\n"},{"x":"如果你想使用图形化工具来解决冲突，你可以运行 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果你想使用除默认工具（在这里 Git 使用 ","n":"p","l":"\n"},{"a":[["class","admonition note"],["title","Note"]],"x":"\n","n":"aside","l":"\n"},{"x":"等你退出合并工具之后，Git 会询问刚才的合并是否成功。\n如果你回答是，Git 会暂存那些文件以表明冲突已解决：\n你可以再次运行 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"如果你觉得上述的信息不够充分，不能完全体现分支合并的过程，你可以修改上述信息，添加一些细节给未来检视这个合并的读者一些帮助，告诉他们你是如何解决合并冲突的，以及理由是什么。","n":"p","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span","l":"Merge branch 'iss53'\n\nConflicts:\n    index.html\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":"\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" It looks like you may be committing a merge.\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" If this is not correct, please remove the file\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":"\t.git/MERGE_HEAD\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" and try again.\n\n\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" Please enter the commit message "},{"a":[["style","font-weight: bold"]],"x":"for","n":"span","l":" your changes. Lines starting\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" with "},{"a":[["style","font-style: italic"]],"x":"'#'","n":"span","l":" will be ignored, and an empty message aborts the commit.\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" On branch master\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" All conflicts fixed but you are still merging.\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":"\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":" Changes to be committed:\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span","l":"\tmodified:   index.html\n"},{"a":[["style","font-weight: bold"]],"x":"#","n":"span"},{"a":[["class","literal"]],"x":"git commit","n":"code","l":" 来完成合并提交。\n默认情况下提交信息看起来像下面这个样子："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git status\nOn branch master\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   index.html"},{"a":[["class","literal"]],"x":"git status","n":"code","l":" 来确认所有的合并冲突都已被解决："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"如果你需要更加高级的工具来解决复杂的合并冲突，我们会在 ","n":"p","l":"\n"},{"a":[["id","xref--ch07-git-tools--r_advanced_merging"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_advanced_merging\"}"]],"x":"高级合并","n":"a","l":" 介绍更多关于分支合并的内容。"},{"a":[["class","literal"]],"x":"opendiff","n":"code","l":" 做为默认的合并工具，因为作者在 Mac 上运行该程序）外的其他合并工具，你可以在 “下列工具中（one of the following tools）” 这句后面看到所有支持的合并工具。\n然后输入你喜欢的工具名字就可以了。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git mergetool\n\nThis message is displayed because 'merge.tool' is not configured.\nSee 'git mergetool --tool-help' or 'git help config' for more details.\n'git mergetool' will now attempt to use one of the following tools:\nopendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge\nMerging:\nindex.html\n\nNormal merge conflict for 'index.html':\n  {local}: modified file\n  {remote}: modified file\nHit return to start merge resolution tool (opendiff):"},{"a":[["class","literal"]],"x":"git mergetool","n":"code","l":"，该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突："},{"a":[["class","literal"]],"x":"<<<<<<<","n":"code","l":" , "},{"a":[["class","literal"]],"x":"=======","n":"code","l":" , 和 "},{"a":[["class","literal"]],"x":">>>>>>>","n":"code","l":" 这些行被完全删除了。\n在你解决了所有文件里的冲突之后，对每个文件使用 "},{"a":[["class","literal"]],"x":"git add","n":"code","l":" 命令来将其标记为冲突已解决。\n一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。"},{"a":[["class","source language-html"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span","l":"<"},{"a":[["style","font-weight: bold"]],"x":"div","n":"span","l":" id="},{"a":[["style","font-style: italic"]],"x":"\"footer\"","n":"span","l":">\nplease contact us at email.support@github.com\n</"},{"a":[["style","font-weight: bold"]],"x":"div","n":"span","l":">"},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 所指示的版本（也就是你的 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（"},{"a":[["class","literal"]],"x":"=======","n":"code","l":" 的上半部分），而 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支所指示的版本在 "},{"a":[["class","literal"]],"x":"=======","n":"code","l":" 的下半部分。\n为了解决冲突，你必须选择使用由 "},{"a":[["class","literal"]],"x":"=======","n":"code","l":" 分割的两部分中的一个，或者你也可以自行合并这些内容。\n例如，你可以通过把这段内容换成下面的样子来解决冲突："},{"a":[["class","source language-html"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","border: 1px solid #FF0000"]],"x":"<<<<<<","n":"span","l":"< "},{"a":[["style","font-weight: bold"]],"x":"HEAD:index.html","n":"span","l":"\n"},{"a":[["style","border: 1px solid #FF0000"]],"x":"<","n":"span","l":"div id="},{"a":[["style","font-style: italic"]],"x":"\"footer\"","n":"span","l":">contact : email.support@github.com</"},{"a":[["style","font-weight: bold"]],"x":"div","n":"span","l":">\n=======\n<"},{"a":[["style","font-weight: bold"]],"x":"div","n":"span","l":" id="},{"a":[["style","font-style: italic"]],"x":"\"footer\"","n":"span","l":">\n please contact us at support@github.com\n</"},{"a":[["style","font-weight: bold"]],"x":"div","n":"span","l":">\n>>>>>>> iss53:index.html"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\n    both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"},{"a":[["class","literal"]],"x":"git status","n":"code","l":" 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件："},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result."},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突："},{"a":[["id","r_basic_merging"]],"x":"分支的合并","n":"h3","l":"\n"},{"x":"\n假设你已经修正了 #53 问题，并且打算将你的工作合并入 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这和你之前合并 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。\n这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"需要指出的是，Git 会自行决定选取哪一个提交作为最优的共同祖先，并以此作为合并的基础；这和更加古老的 CVS 系统或者 Subversion （1.5 版本之前）不同，在这些古老的版本管理系统中，用户需要自己选择最佳的合并基础。\nGit 的这个优势使其在合并操作上比其他系统要简单很多。","n":"p","l":"\n"},{"x":"既然你的修改已经合并进来了，你已经不再需要 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -d iss53"},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支了。\n现在你可以在任务追踪系统中关闭此项任务，并删除这个分支。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 17. 一个合并提交","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLW1lcmdpbmctMi5wbmc=|"],["alt","一个合并提交。"],["data-calibre-src","OEBPS/images/basic-merging-2.png"]],"n":"img","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 16. 一次典型合并中所用到的三个快照","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLW1lcmdpbmctMS5wbmc=|"],["alt","一次典型合并中所用到的三个快照。"],["data-calibre-src","OEBPS/images/basic-merging-1.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 分支的时候看起来有一点不一样。\n在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。\n因为，"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支所在提交并不是 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支所在提交的直接祖先，Git 不得不做一些额外的工作。\n出现这种情况的时候，Git 会使用两个分支的末端所指的快照（"},{"a":[["class","literal"]],"x":"C4","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"C5","n":"code","l":"）以及这两个分支的工作祖先（"},{"a":[["class","literal"]],"x":"C2","n":"code","l":"），做一个简单的三方合并。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout master\nSwitched to branch 'master'\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git merge iss53\nMerge made by the 'recursive' strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。\n为此，你需要合并 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支到 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支，这和之前你合并 "},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 分支所做的工作差不多。\n你只需要检出到你想合并入的分支，然后运行 "},{"a":[["class","literal"]],"x":"git merge","n":"code","l":" 命令："},{"a":[["id","r_basic_branching"]],"x":"新建分支","n":"h3","l":"\n"},{"x":"\n首先，我们假设你正在你的项目上工作，并且已经有一些提交。","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在，你已经决定要解决你的公司使用的问题追踪系统中的 #53 问题。\n想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"它是下面两条命令的简写：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"你继续在 #53 问题上工作，并且做了一些提交。\n在此过程中，","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在你接到那个电话，有个紧急问题等待你来解决。\n有了 Git 的帮助，你不必把这个紧急问题和 ","n":"p","l":"\n"},{"x":"但是，在你这么做之前，要留意你的工作目录和暂存区里那些还没有被提交的修改，它可能会和你即将检出的分支产生冲突从而阻止 Git 切换到该分支。\n最好的方法是，在你切换分支之前，保持好一个干净的状态。\n有一些方法可以绕过这个问题（即，保存进度（stashing） 和 修补提交（commit amending）），我们会在 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这个时候，你的工作目录和你在开始 #53 问题之前一模一样，现在你可以专心修复紧急问题了。\n请牢记：当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。\nGit 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样。","n":"p","l":"\n"},{"x":"接下来，你要修复这个紧急问题。\n让我们建立一个针对该紧急问题的分支（hotfix branch），在该分支上工作直到问题解决：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"你可以运行你的测试，确保你的修改是正确的，然后将其合并回你的 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"在合并的时候，你应该注意到了\"快进（fast-forward）\"这个词。\n由于当前 ","n":"p","l":"\n"},{"x":"现在，最新的修改已经在 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"关于这个紧急问题的解决方案发布之后，你准备回到被打断之前时的工作中。\n然而，你应该先删除 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在你可以切换回你正在工作的分支继续你的工作，也就是针对 #53 问题的那个分支（iss53 分支）。","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"你在 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 分支上所做的工作并没有包含到 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支中。\n如果你需要拉取 "},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 所做的修改，你可以使用 "},{"a":[["class","literal"]],"x":"git merge master","n":"code","l":" 命令将 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支合并入 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支，或者你也可以等到 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支完成其使命，再将其合并回 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 15. 继续在 ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支上的工作"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLWJyYW5jaGluZy02LnBuZw==|"],["alt","继续在 `iss53` 分支上的工作。"],["data-calibre-src","OEBPS/images/basic-branching-6.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout iss53\nSwitched to branch \"iss53\"\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" vim index.html\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git commit -a -m "},{"a":[["style","font-style: italic"]],"x":"'finished the new footer [issue 53]'","n":"span","l":"\n[iss53 ad82d7a] finished the new footer [issue 53]\n1 file changed, 1 insertion(+)"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch -d hotfix\nDeleted branch hotfix (3a0874c)."},{"a":[["class","literal"]],"x":"hotfix","n":"code","l":" 分支，因为你已经不再需要它了 —— "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支已经指向了同一个位置。\n你可以使用带 "},{"a":[["class","literal"]],"x":"-d","n":"code","l":" 选项的 "},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 命令来删除分支："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 14. ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 被快进到 "},{"a":[["class","literal"]],"x":"hotfix","n":"code"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLWJyYW5jaGluZy01LnBuZw==|"],["alt","`master` 被快进到 `hotfix`。"],["data-calibre-src","OEBPS/images/basic-branching-5.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支所指向的提交快照中，你可以着手发布该修复了。"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支所指向的提交是你当前提交（有关 hotfix 的提交）的直接上游，所以 Git 只是简单的将指针向前移动。\n换句话说，当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout master\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n index.html | 2 ++\n 1 file changed, 2 insertions(+)"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支来部署到线上。\n你可以使用 "},{"a":[["class","literal"]],"x":"git merge","n":"code","l":" 命令来达到上述目的："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 13. 基于 ","n":"figcaption","l":"\n"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支的紧急问题分支 "},{"a":[["class","literal"]],"x":"hotfix branch","n":"code"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLWJyYW5jaGluZy00LnBuZw==|"],["alt","基于 `master` 分支的紧急问题分支（hotfix branch）。"],["data-calibre-src","OEBPS/images/basic-branching-4.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout -b hotfix\nSwitched to a new branch 'hotfix'\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" vim index.html\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git commit -a -m "},{"a":[["style","font-style: italic"]],"x":"'fixed the broken email address'","n":"span","l":"\n[hotfix 1fb7853] fixed the broken email address\n 1 file changed, 2 insertions(+)"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout master\nSwitched to branch 'master'"},{"a":[["id","xref--ch07-git-tools--r_git_stashing"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch07-git-tools.xhtml\", \"frag\": \"r_git_stashing\"}"]],"x":"储藏与清理","n":"a","l":" 中看到关于这两个命令的介绍。\n现在，我们假设你已经把你的修改全部提交了，这时你可以切换回 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支了："},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 的修改混在一起，你也不需要花大力气来还原关于 53# 问题的修改，然后再添加关于这个紧急问题的修改，最后将这个修改提交到线上分支。\n你所要做的仅仅是切换回 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 12. iss53 分支随着工作的进展向前推进","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLWJyYW5jaGluZy0zLnBuZw==|"],["alt","iss53 分支随着工作的进展向前推进。"],["data-calibre-src","OEBPS/images/basic-branching-3.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" vim index.html\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git commit -a -m "},{"a":[["style","font-style: italic"]],"x":"'added a new footer [issue 53]'","n":"span"},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支在不断的向前推进，因为你已经检出到该分支（也就是说，你的 "},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 指针指向了 "},{"a":[["class","literal"]],"x":"iss53","n":"code","l":" 分支）"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 11. 创建一个新分支指针","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLWJyYW5jaGluZy0yLnBuZw==|"],["alt","创建一个新分支指针。"],["data-calibre-src","OEBPS/images/basic-branching-2.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch iss53\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout iss53"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout -b iss53\nSwitched to a new branch \"iss53\""},{"a":[["class","literal"]],"x":"-b","n":"code","l":" 参数的 "},{"a":[["class","literal"]],"x":"git checkout","n":"code","l":" 命令："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 10. 一个简单提交历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2Jhc2ljLWJyYW5jaGluZy0xLnBuZw==|"],["alt","一个简单的提交历史。"],["data-calibre-src","OEBPS/images/basic-branching-1.png"]],"n":"img","l":"\n"},{"a":[["class","arabic"]],"x":"\n","n":"ol","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"a":[["class","principal"]],"x":"切换回你最初工作的分支上，继续工作。","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"为这个紧急任务新建一个分支，并在其中修复它。","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"切换到你的线上分支（production branch）。","n":"span","l":"\n"},{"a":[["class","arabic"]],"x":"\n","n":"ol","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"x":"\n","n":"li","l":"\n"},{"a":[["class","principal"]],"x":"在这个分支上开展工作。","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"为实现某个新的需求，创建一个分支。","n":"span","l":"\n"},{"a":[["class","principal"]],"x":"开发某个网站。","n":"span","l":"\n"},{"a":[["id","r_git_branches_overview"]],"x":"分支简介","n":"h2","l":"\n"},{"x":"为了真正理解 Git 处理分支的方式，我们需要回顾一下 Git 是如何保存数据的。","n":"p","l":"\n"},{"x":"或许你还记得 ","n":"p","l":"\n"},{"x":"在进行提交操作时，Git 会保存一个提交对象（commit object）。知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。\n但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象，","n":"p","l":"\n"},{"x":"为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。\n暂存操作会为每一个文件计算校验和（使用我们在 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"当使用 ","n":"p","l":"\n"},{"x":"现在，Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个树对象（记录着目录结构和 blob 对象索引）以及一个提交对象（包含着指向前述树对象的指针和所有提交信息）。","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"Git 的分支，其实本质上仅仅是指向提交对象的可变指针。\nGit 的默认分支名字是 ","n":"p","l":"\n"},{"a":[["class","admonition note"],["title","Note"]],"x":"\n","n":"aside","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","sect2"],["title","分支创建"]],"x":"\n","n":"section","l":"\n"},{"a":[["class","sect2"],["title","分支切换"]],"x":"\n","n":"section","l":"\n"},{"a":[["id","r_switching_branches"]],"x":"分支切换","n":"h3","l":"\n"},{"x":"\n要切换到一个已存在的分支，你需要使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这样 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"那么，这样的实现方式会给我们带来什么好处呢？\n现在不妨再提交一次：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"如图所示，你的 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"这条命令做了两件事。\n一是使 HEAD 指回 ","n":"p","l":"\n"},{"a":[["class","admonition note"],["title","Note: 分支切换会改变你工作目录中的文件"]],"x":"\n","n":"aside","l":"\n"},{"x":"我们不妨再稍微做些修改并提交：","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"现在，这个项目的提交历史已经产生了分叉（参见 ","n":"p","l":"\n"},{"a":[["id","rdivergent_history"],["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"你可以简单地使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。\n创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？","n":"p","l":"\n"},{"x":"这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。\n完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。而在 Git 中，任何规模的项目都能在瞬间创建新分支。\n同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。\n这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。","n":"p","l":"\n"},{"x":"接下来，让我们看看你为什么应该这样做。","n":"p","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature #32 - ability to add new formats to the\n* 34ac2 fixed bug #1328 - stack overflow under certain conditions\n* 98ca9 initial commit of my project"},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 命令查看分叉历史。\n运行 "},{"a":[["class","literal"]],"x":"git log --oneline --decorate --graph --all","n":"code","l":" ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 9. 项目分叉历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2FkdmFuY2UtbWFzdGVyLnBuZw==|"],["alt","项目分叉历史。"],["data-calibre-src","OEBPS/images/advance-master.png"]],"n":"img","l":"\n"},{"a":[["id","xref-rdivergent_history"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch03-git-branching.xhtml\", \"frag\": \"rdivergent_history\"}"]],"x":"项目分叉历史","n":"a","l":"）。\n因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。\n上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。\n而所有这些工作，你需要的命令只有 "},{"a":[["class","literal"]],"x":"branch","n":"code","l":"、"},{"a":[["class","literal"]],"x":"checkout","n":"code","l":" 和 "},{"a":[["class","literal"]],"x":"commit","n":"code","l":"。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" vim test.rb\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git commit -a -m "},{"a":[["style","font-style: italic"]],"x":"'made other changes'","n":"span"},{"x":"分支切换会改变你工作目录中的文件","n":"h2","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"在切换分支时，一定要注意你工作目录里的文件会被改变。\n如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。\n如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支，二是将工作目录恢复成 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支所指向的快照内容。\n也就是说，你现在做修改的话，项目将始于一个较旧的版本。\n本质上来讲，这就是忽略 "},{"a":[["class","literal"]],"x":"testing","n":"code","l":" 分支所做的修改，以便于向另一个方向进行开发。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 8. 检出时 HEAD 随之移动","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2NoZWNrb3V0LW1hc3Rlci5wbmc=|"],["alt","检出时 HEAD 随之移动。"],["data-calibre-src","OEBPS/images/checkout-master.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout master"},{"a":[["class","literal"]],"x":"testing","n":"code","l":" 分支向前移动了，但是 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支却没有，它仍然指向运行 "},{"a":[["class","literal"]],"x":"git checkout","n":"code","l":" 时所指的对象。\n这就有意思了，现在我们切换回 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支看看："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 7. HEAD 分支随着提交操作自动向前移动","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2FkdmFuY2UtdGVzdGluZy5wbmc=|"],["alt","HEAD 分支随着提交操作自动向前移动。"],["data-calibre-src","OEBPS/images/advance-testing.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" vim test.rb\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git commit -a -m "},{"a":[["style","font-style: italic"]],"x":"'made a change'","n":"span"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 6. HEAD 指向当前所在的分支","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2hlYWQtdG8tdGVzdGluZy5wbmc=|"],["alt","HEAD 指向当前所在的分支。"],["data-calibre-src","OEBPS/images/head-to-testing.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 就指向 "},{"a":[["class","literal"]],"x":"testing","n":"code","l":" 分支了。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git checkout testing"},{"a":[["class","literal"]],"x":"git checkout","n":"code","l":" 命令。\n我们现在切换到新创建的 "},{"a":[["class","literal"]],"x":"testing","n":"code","l":" 分支去："},{"a":[["id","r_create_new_branch"]],"x":"分支创建","n":"h3","l":"\n"},{"x":"\nGit 是怎么创建新分支的呢？\n很简单，它只是为你创建了一个可以移动的新的指针。\n比如，创建一个 testing 分支，\n你需要使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"这会在当前所在的提交对象上创建一个指针。","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"那么，Git 又是怎么知道当前在哪一个分支上呢？\n也很简单，它有一个名为 ","n":"p","l":"\n"},{"a":[["class","image"]],"x":"\n","n":"figure","l":"\n"},{"x":"你可以简单地使用 ","n":"p","l":"\n"},{"a":[["class","listing"]],"x":"\n","n":"figure","l":"\n"},{"x":"正如你所见，当前 “master” 和 “testing” 分支均指向校验和以 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"f30ab","n":"code","l":" 开头的提交对象。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git log --oneline --decorate\nf30ab (HEAD, master, testing) add feature #32 - ability to add new\n34ac2 fixed bug #1328 - stack overflow under certain conditions\n98ca9 initial commit of my project"},{"a":[["class","literal"]],"x":"git log","n":"code","l":" 命令查看各个分支当前所指的对象。\n提供这一功能的参数是 "},{"a":[["class","literal"]],"x":"--decorate","n":"code","l":"。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 5. HEAD 指向当前所在的分支","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2hlYWQtdG8tbWFzdGVyLnBuZw==|"],["alt","HEAD 指向当前所在的分支。"],["data-calibre-src","OEBPS/images/head-to-master.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 的特殊指针。\n请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 "},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 概念完全不同。\n在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 "},{"a":[["class","literal"]],"x":"HEAD","n":"code","l":" 想象为当前分支的别名）。\n在本例中，你仍然在 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支上。\n因为 "},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 命令仅仅 "},{"x":"创建","n":"em","l":" 一个新分支，并不会自动切换到新分支中去。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 4. 两个指向相同提交历史的分支","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL3R3by1icmFuY2hlcy5wbmc=|"],["alt","两个指向相同提交历史的分支。"],["data-calibre-src","OEBPS/images/two-branches.png"]],"n":"img","l":"\n"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git branch testing"},{"a":[["class","literal"]],"x":"git branch","n":"code","l":" 命令："},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 3. 分支及其提交历史","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2JyYW5jaC1hbmQtaGlzdG9yeS5wbmc=|"],["alt","分支及其提交历史。"],["data-calibre-src","OEBPS/images/branch-and-history.png"]],"n":"img","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Git 的 “master” 分支并不是一个特殊分支。\n它就跟其它分支完全没有区别。\n之所以几乎每一个仓库都有 master 分支，是因为 ","n":"p","l":"\n"},{"a":[["class","literal"]],"x":"git init","n":"code","l":" 命令默认创建它，并且大多数人都懒得去改动它。"},{"a":[["class","literal"]],"x":"master","n":"code","l":"。\n在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 "},{"a":[["class","literal"]],"x":"master","n":"code","l":" 分支。\n它会在每次的提交操作中自动向前移动。"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 2. 提交对象及其父对象","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2NvbW1pdHMtYW5kLXBhcmVudHMucG5n|"],["alt","提交对象及其父对象。"],["data-calibre-src","OEBPS/images/commits-and-parents.png"]],"n":"img","l":"\n"},{"a":[["class","content"]],"x":"\n","n":"div","l":"\n"},{"x":"Figure 1. 首次提交对象及其树结构","n":"figcaption","l":"\n"},{"a":[["src","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvaW1hZ2VzL2NvbW1pdC1hbmQtdHJlZS5wbmc=|"],["alt","首次提交对象及其树结构。"],["data-calibre-src","OEBPS/images/commit-and-tree.png"]],"n":"img","l":"\n"},{"a":[["class","literal"]],"x":"git commit","n":"code","l":" 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和，然后在 Git 仓库中这些校验和保存为树对象。\n随后，Git 便会创建一个提交对象，它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。"},{"a":[["class","source language-console"]],"n":"pre","l":"\n"},{"n":"code"},{"n":"span"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git add README test.rb LICENSE\n"},{"a":[["style","font-weight: bold"]],"x":"$","n":"span","l":" git commit -m "},{"a":[["style","font-style: italic"]],"x":"'The initial commit of my project'","n":"span"},{"a":[["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch01-introduction.xhtml\", \"frag\": \"\"}"]],"x":"起步","n":"a","l":" 中提到的 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交："},{"a":[["id","xref--ch01-introduction"],["href","javascript:void(0)"],["class","xref"],["data-3JJgffKNGXxmBkDC5QJuPA","{\"name\": \"OEBPS/ch01-introduction.xhtml\", \"frag\": \"\"}"]],"x":"起步","n":"a","l":" 的内容，Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。"},{"a":[["class","chapter-header"]],"x":"\n","n":"div","l":"\n"},{"a":[["class","chapter-title"]],"n":"h1","l":"\n"},{"a":[["class","subtitle"]],"n":"small"},{"x":"Git","n":"b","l":" "},{"x":"分支","n":"b"},{"x":"Git 分支","n":"title","l":"\n"},{"a":[["rel","stylesheet"],["type","text/css"],["href","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvc3R5bGVzL2VwdWIzLmNzcw==|"]],"n":"link","l":"\n"},{"a":[["rel","stylesheet"],["type","text/css"],["href","3JJgffKNGXxmBkDC5QJuPA|T0VCUFMvc3R5bGVzL2VwdWIzLWNzczMtb25seS5jc3M=|"],["media","(min-device-width: 0px)"]],"n":"link","l":"\n"},{"a":[["type","text/javascript"]],"x":"\ndocument.addEventListener('DOMContentLoaded', function(event, reader) {\n  if (!(reader = navigator.epubReadingSystem)) {\n    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };\n    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;\n  }\n  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));\n});\n","n":"script","l":"\n"}]}